name: release-pc

on:
  workflow_dispatch:
    inputs:
      version:
        description: "release version/tag (e.g., v3.1.28)"
        required: true
      packageManager:
        description: "pnpm@x.x.x"
        required: true

# Need write permission for the commit step in the new job
permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - os: ubuntu-22.04
            kernel_path: "../app/kernel-linux/SiYuan-Kernel"
            build_args: "-s -w -X github.com/siyuan-note/siyuan/kernel/util.Mode=prod"
            electron_args: "dist-linux"
            goos: "linux"
            goarch: "amd64"
            suffix: "linux.tar.gz"
          - os: macos-latest
            kernel_path: "../app/kernel-darwin/SiYuan-Kernel"
            build_args: "-s -w -X github.com/siyuan-note/siyuan/kernel/util.Mode=prod"
            electron_args: "dist-darwin"
            goos: "darwin"
            goarch: "amd64"
            suffix: "mac.dmg"
          - os: macos-latest
            kernel_path: "../app/kernel-darwin-arm64/SiYuan-Kernel"
            build_args: "-s -w -X github.com/siyuan-note/siyuan/kernel/util.Mode=prod"
            electron_args: "dist-darwin-arm64"
            goos: "darwin"
            goarch: "arm64"
            suffix: "mac-arm64.dmg"
          - os: windows-latest
            name: windows build win.exe
            kernel_path: "../app/kernel/SiYuan-Kernel.exe"
            build_args_prefix: "-s -w -H=windowsgui -X"
            build_args_suffix: "Mode=prod"
            electron_args: "dist"
            goos: "windows"
            gobin: "bin"
            mingwsys: "MINGW64"
            goarch: "amd64"
            suffix: "win.exe"
    steps:
      - uses: actions/checkout@v4
        with:
          path: siyuan-note

      - name: clone origin and apply patches
        run: |
          mkdir -p ${{ github.workspace }}/go
          cd ${{ github.workspace }}/siyuan-note/

          git clone --branch ${{ github.event.inputs.version }} --depth=1 https://github.com/siyuan-note/siyuan.git
          cd siyuan

          git apply ${{ github.workspace }}/siyuan-note/patches/siyuan/kernel.patch
          git apply ${{ github.workspace }}/siyuan-note/patches/siyuan/local-vip.patch

          git status

      - name: Set up MingGW
        uses: msys2/setup-msys2@v2
        if: "contains( matrix.config.goos, 'windows')"
        with:
          install: p7zip mingw-w64-x86_64-lua

      - name: Set up TDM-GCC
        run: msys2 -c "bash siyuan-note/siyuan/scripts/get-tdm-gcc.sh tdm https://github.com/jmeubank/tdm-gcc/releases/download/v10.3.0-tdm-1/tdm-gcc-10.3.0.exe" && echo "CC=${{ github.workspace }}/tdm/bin/gcc.exe" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        if: contains( matrix.config.goarch, '386')
        working-directory: ${{ github.workspace }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: ${{ github.workspace }}/siyuan-note/siyuan/kernel/go.mod
          cache-dependency-path: "**/*.sum"
      - run: go version

      - name: Set up goversioninfo
        run: go get github.com/josephspurrier/goversioninfo/cmd/goversioninfo && go install github.com/josephspurrier/goversioninfo/cmd/goversioninfo
        if: "contains( matrix.config.goos, 'windows')"
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/kernel
        env:
          GO111MODULE: on
          CGO_ENABLED: 1
          GOOS: ${{ matrix.config.goos }}
          GOPATH: ${{ github.workspace }}/go
          GOARCH: ${{ matrix.config.goarch }}

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Node pnpm
        run: npm install -g ${{ github.event.inputs.packageManager }}
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/app

      - name: Install Node Dependencies
        run: pnpm install --no-frozen-lockfile
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/app

      - name: Building UI
        run: pnpm run build
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/app

      - name: Generate Icon Resource and Properties/Version Info For Windows
        run: ${{ github.workspace }}\go\${{ matrix.config.gobin }}\goversioninfo -platform-specific=true -icon="resource\icon.ico" -manifest="resource\goversioninfo.exe.manifest"
        if: "contains( matrix.config.goos, 'windows')"
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/kernel

      - name: Building Kernel
        run: go build --tags fts5 -o "${{ matrix.config.kernel_path }}" -v -ldflags "${{ matrix.config.build_args }}"
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/kernel
        env:
          GO111MODULE: on
          CGO_ENABLED: 1
          GOOS: ${{ matrix.config.goos }}
          GOPATH: ${{ github.workspace }}/go
          GOARCH: ${{ matrix.config.goarch }}

      - name: Building Electron
        run: pnpm run ${{ matrix.config.electron_args }}
        working-directory: ${{ github.workspace }}/siyuan-note/siyuan/app

      - uses: joutvhu/get-release@v1
        id: get_current_release
        # Make sure a release for this tag already exists (create it manually or in a previous step)
        # This action fetches an *existing* release, it doesn't create one.
        with:
          tag_name: ${{ github.event.inputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Electron App
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_current_release.outputs.upload_url }}
          asset_name: siyuan-${{ github.event.inputs.version }}-${{ matrix.config.suffix }}
          asset_path: ${{ github.workspace }}/siyuan-note/siyuan/app/build/SiYuan-${{ matrix.config.suffix }}
          asset_content_type: application/octet-stream


  generate_version_json:
    # Run only after all 'build' matrix jobs succeed
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Checkout code again in this new job environment
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Use the input version tag to get specific release details
      - name: Get Release Info by Tag
        id: release_info
        run: |
          TAG_NAME="${{ github.event.inputs.version }}" # Use input version
          echo "Fetching release info for tag: $TAG_NAME"
          # Use GitHub API to get release details *for this specific tag*
          RELEASE_INFO=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME")

          # Check if API call was successful and found a release
          if echo "$RELEASE_INFO" | jq -e '.tag_name' > /dev/null; then
            HTML_URL=$(echo "$RELEASE_INFO" | jq -r '.html_url')
            # IMPORTANT: Assets might still be uploading from parallel jobs when API is hit.
            # Re-fetch assets list just before checksum calculation might be safer if needed,
            # but 'needs: build' should ensure uploads are done.
            ASSETS_JSON=$(echo "$RELEASE_INFO" | jq -c '.assets')
            echo "Found release for tag: $TAG_NAME"
            echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "release_url=$HTML_URL" >> $GITHUB_OUTPUT
            echo "assets_json=$ASSETS_JSON" >> $GITHUB_OUTPUT
          else
            echo "::error::Could not fetch release info for tag $TAG_NAME. Ensure a release draft/publish exists for this tag *before* asset upload."
            echo "API Response: $RELEASE_INFO"
            exit 1
          fi
        shell: bash

      # Use the corrected checksum script
      - name: Calculate Checksums and Build JSON Map
        id: checksums
        run: |
          assets_json='${{ steps.release_info.outputs.assets_json }}'
          checksums_map='{}'
          temp_dir=$(mktemp -d)
          if [ -z "$assets_json" ] || [ "$assets_json" == "null" ] || [ "$assets_json" == "[]" ]; then
            echo "::warning::No assets found for release tag ${{ steps.release_info.outputs.tag }}. Checksums map will be empty."
          else
            while IFS=$'\t' read -r asset_name checksum; do
              if [ -n "$asset_name" ] && [ -n "$checksum" ]; then
                 checksums_map=$(echo "$checksums_map" | jq --arg key "$asset_name" --arg value "$checksum" '. + {($key): $value}')
              fi
            done < <( \
              echo "$assets_json" | jq -c '.[]' | while IFS= read -r asset_json_line; do
                  asset_name=$(echo "$asset_json_line" | jq -r '.name')
                  asset_url=$(echo "$asset_json_line" | jq -r '.browser_download_url')
                  asset_path="$temp_dir/$asset_name"
                  if [ -z "$asset_name" ] || [ "$asset_name" == "null" ] || [ -z "$asset_url" ] || [ "$asset_url" == "null" ]; then
                    echo "::warning::Skipping asset with missing name or URL: $asset_json_line" >&2
                    continue
                  fi
                  echo "Downloading: $asset_name" >&2
                  if curl -Lfs -o "$asset_path" "$asset_url"; then
                    calculated_checksum=$(sha256sum "$asset_path" | awk '{ print $1 }')
                    printf "%s\t%s\n" "$asset_name" "$calculated_checksum"
                  else
                    echo "::error::Failed to download $asset_name from $asset_url" >&2
                  fi
              done \
            )
          fi
          rm -rf "$temp_dir"
          echo "Checksums map building complete for tag: ${{ steps.release_info.outputs.tag }}"
          echo "Final Checksums Map (JSON):"
          echo "$checksums_map" | jq .
          echo "checksums_map_json<<EOF" >> $GITHUB_OUTPUT
          echo "$checksums_map" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      # Construct the JSON using the tag (removing 'v' prefix)
      - name: Construct Final JSON Object
        id: final_json
        run: |
          checksums_map_json='${{ steps.checksums.outputs.checksums_map_json }}'
          raw_tag="${{ steps.release_info.outputs.tag }}"
          if [ -z "$raw_tag" ]; then
             echo "::error::Version tag is empty. Cannot construct JSON."
             exit 1
          fi
          version_string="${raw_tag#v}"
          r_value="wz3zjPO1YohLl14e"
          bazaar_value="2b3909b84e01bbdabc22607bc4bca79160188cce"
          install_pkg_url="https://github.com/${{ github.repository }}/releases/download/$raw_tag/"
          final_json=$(jq -n \
                        --arg ver "$version_string" \
                        --arg release_url "${{ steps.release_info.outputs.release_url }}" \
                        --argjson checksums "$checksums_map_json" \
                        --arg r_val "$r_value" \
                        --arg installPkg "$install_pkg_url" \
                        --arg bazaar "$bazaar_value" \
                        '{
                          checksums: $checksums,
                          release_en_US: $release_url,
                          ver: $ver,
                          r: $r_val,
                          release: $release_url,
                          release_zh_CN: $release_url,
                          installPkg: $installPkg,
                          bazaar: $bazaar,
                          announcement: []
                        }')
          output_dir="apis/siyuan"
          output_filename="version" # No .json extension
          output_path="$output_dir/$output_filename"
          mkdir -p "$output_dir"
          echo "$final_json" > "$output_path"
          echo "JSON data saved to $output_path"
          echo "output_file=$output_path" >> $GITHUB_OUTPUT
        shell: bash

      # Commit the generated file
      - name: Commit and Push JSON file
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: Update Siyuan version API to ${{ steps.release_info.outputs.tag }}"
          branch: main
          file_pattern: ${{ steps.final_json.outputs.output_file }}
          commit_user_name: github-actions[bot]
          commit_user_email: 41898282+github-actions[bot]@users.noreply.github.com
          commit_author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>