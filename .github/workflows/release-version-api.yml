name: Generate Version API on Release

on:
  # Trigger after 'release-pc.yml' completes
  workflow_run:
    workflows: ["release-pc.yml"]
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: write
  actions: read 

jobs:
  generate_version_json:
    # Run only after all 'build' matrix jobs succeed
    runs-on: ubuntu-latest
    steps:
      # Checkout code again in this new job environment
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Use the input version tag to get specific release details
      - name: Get Release Info by Tag
        id: release_info
        run: |
          LATEST_RELEASE_INFO=$(curl ... "https://api.github.com/repos/${{ github.repository }}/releases/latest")
          TAG_NAME=$(echo "$LATEST_RELEASE_INFO" | jq -r '.tag_name')
          echo "Fetching release info for tag: $TAG_NAME"
          # Use GitHub API to get release details *for this specific tag*
          RELEASE_INFO=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_NAME")

          # Check if API call was successful and found a release
          if echo "$RELEASE_INFO" | jq -e '.tag_name' > /dev/null; then
            HTML_URL=$(echo "$RELEASE_INFO" | jq -r '.html_url')
            # IMPORTANT: Assets might still be uploading from parallel jobs when API is hit.
            # Re-fetch assets list just before checksum calculation might be safer if needed,
            # but 'needs: build' should ensure uploads are done.
            ASSETS_JSON=$(echo "$RELEASE_INFO" | jq -c '.assets')
            echo "Found release for tag: $TAG_NAME"
            echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "release_url=$HTML_URL" >> $GITHUB_OUTPUT
            echo "assets_json=$ASSETS_JSON" >> $GITHUB_OUTPUT
          else
            echo "::error::Could not fetch release info for tag $TAG_NAME. Ensure a release draft/publish exists for this tag *before* asset upload."
            echo "API Response: $RELEASE_INFO"
            exit 1
          fi
        shell: bash

      # Use the corrected checksum script
      - name: Calculate Checksums and Build JSON Map
        id: checksums
        run: |
          assets_json='${{ steps.release_info.outputs.assets_json }}'
          checksums_map='{}'
          temp_dir=$(mktemp -d)
          echo "Using temp dir: $temp_dir" # Added for debugging visibility

          if [ -z "$assets_json" ] || [ "$assets_json" == "null" ] || [ "$assets_json" == "[]" ]; then
            echo "::warning::No assets found for release tag ${{ steps.release_info.outputs.tag }}. Checksums map will be empty."
          else
            # Loop through calculated checksums
            while IFS=$'\t' read -r original_asset_name checksum; do
              if [ -n "$original_asset_name" ] && [ -n "$checksum" ]; then
                 # --- MODIFICATION START ---
                 # Remove 'v' only if it's followed by a digit (common version pattern)
                 # Example: siyuan-v3.1.28-win.exe -> siyuan-3.1.28-win.exe
                 # Example: other-v-file.txt -> other-v-file.txt (no change)
                 # Example: versionless.zip -> versionless.zip (no change)
                 map_key_name=$(echo "$original_asset_name" | sed 's/-v\([0-9]\)/-\1/')
                 echo "Original Name: '$original_asset_name', Map Key Name: '$map_key_name'" # Added for debugging
                 # --- MODIFICATION END ---

                 # Use the modified name as the key
                 checksums_map=$(echo "$checksums_map" | jq --arg key "$map_key_name" --arg value "$checksum" '. + {($key): $value}')
              else
                 echo "::warning::Skipping line with empty original name or checksum." # Added detail
              fi
            done < <( \
              # Inner loop: Download assets and calculate checksums
              echo "$assets_json" | jq -c '.[]' | while IFS= read -r asset_json_line; do
                  # Extract original name and URL
                  asset_name=$(echo "$asset_json_line" | jq -r '.name')
                  asset_url=$(echo "$asset_json_line" | jq -r '.browser_download_url')
                  asset_path="$temp_dir/$asset_name"

                  if [ -z "$asset_name" ] || [ "$asset_name" == "null" ] || [ -z "$asset_url" ] || [ "$asset_url" == "null" ]; then
                    echo "::warning::Skipping asset with missing name or URL: $asset_json_line" >&2
                    continue
                  fi

                  echo "Processing asset: $asset_name" >&2 # Changed from Downloading
                  # Use '-s' for silent, '-S' to show errors, '-f' to fail silently on server errors, '-L' follow redirects, '-o' output file
                  if curl -fsSL -o "$asset_path" "$asset_url"; then
                    echo "Downloaded: $asset_name to $asset_path" >&2
                    # Calculate checksum
                    calculated_checksum=$(sha256sum "$asset_path" | awk '{ print $1 }')
                    if [ -z "$calculated_checksum" ]; then
                       echo "::error::Failed to calculate checksum for $asset_name" >&2
                    else
                       # Output original name and checksum, tab-separated
                       printf "%s\t%s\n" "$asset_name" "$calculated_checksum"
                    fi
                  else
                    # Check curl exit code for more info if needed
                    curl_exit_code=$?
                    echo "::error::Failed to download $asset_name from $asset_url (curl exit code: $curl_exit_code)" >&2
                  fi
              done \
            )
          fi

          # Cleanup
          echo "Removing temp dir: $temp_dir" # Added for debugging visibility
          rm -rf "$temp_dir"

          echo "Checksums map building complete for tag: ${{ steps.release_info.outputs.tag }}"
          echo "Final Checksums Map (JSON):"
          # Pretty print the final map for logs
          echo "$checksums_map" | jq .

          # Set the output variable for subsequent steps
          echo "checksums_map_json<<EOF" >> $GITHUB_OUTPUT
          echo "$checksums_map" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      # Construct the JSON using the tag (removing 'v' prefix)
      - name: Construct Final JSON Object
        id: final_json
        run: |
          checksums_map_json='${{ steps.checksums.outputs.checksums_map_json }}'
          raw_tag="${{ steps.release_info.outputs.tag }}"
          if [ -z "$raw_tag" ]; then
             echo "::error::Version tag is empty. Cannot construct JSON."
             exit 1
          fi
          version_string="${raw_tag#v}"
          r_value="wz3zjPO1YohLl14e"
          bazaar_value="2b3909b84e01bbdabc22607bc4bca79160188cce"
          install_pkg_url="https://github.com/${{ github.repository }}/releases/download/$raw_tag/"
          final_json=$(jq -n \
                        --arg ver "$version_string" \
                        --arg release_url "${{ steps.release_info.outputs.release_url }}" \
                        --argjson checksums "$checksums_map_json" \
                        --arg r_val "$r_value" \
                        --arg installPkg "$install_pkg_url" \
                        --arg bazaar "$bazaar_value" \
                        '{
                          checksums: $checksums,
                          release_en_US: $release_url,
                          ver: $ver,
                          r: $r_val,
                          release: $release_url,
                          release_zh_CN: $release_url,
                          installPkg: $installPkg,
                          bazaar: $bazaar,
                          announcement: []
                        }')
          output_dir="apis/siyuan"
          output_filename="version" # No .json extension
          output_path="$output_dir/$output_filename"
          mkdir -p "$output_dir"
          echo "$final_json" > "$output_path"
          echo "JSON data saved to $output_path"
          echo "output_file=$output_path" >> $GITHUB_OUTPUT
        shell: bash

      - name: Pull latest changes from main
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          # --- Add this line ---
          git add ${{ steps.final_json.outputs.output_file }}
          # --------------------
          # Now pull/rebase with the change staged
          git pull --rebase origin main
        shell: bash

      # Commit and Push JSON file (should now work)
      - name: Commit and Push JSON file
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          # ... (rest of the parameters remain the same) ...
          commit_message: "chore: Update Siyuan version API to ${{ steps.release_info.outputs.tag }}"
          branch: main
          file_pattern: ${{ steps.final_json.outputs.output_file }}
          commit_user_name: github-actions[bot]
          commit_user_email: 41898282+github-actions[bot]@users.noreply.github.com
          commit_author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
