name: Generate Version API on Release

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  generate-json:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get Release Info
        id: release_info
        run: |
          # Handle manual trigger (workflow_dispatch) where release context is empty
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Manual trigger detected. Fetching latest release info via API."
            LATEST_RELEASE_INFO=$(curl -s -H "Accept: application/vnd.github.v3+json" -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest")
            if echo "$LATEST_RELEASE_INFO" | jq -e '.tag_name' > /dev/null; then
              echo "tag=$(echo "$LATEST_RELEASE_INFO" | jq -r '.tag_name')" >> $GITHUB_OUTPUT
              echo "release_url=$(echo "$LATEST_RELEASE_INFO" | jq -r '.html_url')" >> $GITHUB_OUTPUT
              echo "assets_json=$(echo "$LATEST_RELEASE_INFO" | jq -c '.assets')" >> $GITHUB_OUTPUT
            else
              echo "::error::Could not fetch latest release info or no releases found."
              echo "API Response: $LATEST_RELEASE_INFO"
              exit 1
            fi
          else
            # Standard release trigger
            echo "Release trigger detected."
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
            echo "release_url=${{ github.event.release.html_url }}" >> $GITHUB_OUTPUT
            echo "assets_json=$(echo '${{ toJSON(github.event.release.assets) }}' | jq -c .)" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Calculate Checksums and Build JSON Map
        id: checksums
        run: |
          assets_json='${{ steps.release_info.outputs.assets_json }}'
          checksums_map='{}'
          temp_dir=$(mktemp -d)
          if [ -z "$assets_json" ] || [ "$assets_json" == "null" ] || [ "$assets_json" == "[]" ]; then
            echo "::warning::No assets found for release tag ${{ steps.release_info.outputs.tag }}. Checksums map will be empty."
          else
            while IFS=$'\t' read -r asset_name checksum; do
              if [ -n "$asset_name" ] && [ -n "$checksum" ]; then
                 checksums_map=$(echo "$checksums_map" | jq --arg key "$asset_name" --arg value "$checksum" '. + {($key): $value}')
              fi
            done < <( \
              echo "$assets_json" | jq -c '.[]' | while IFS= read -r asset_json_line; do
                  asset_name=$(echo "$asset_json_line" | jq -r '.name')
                  asset_url=$(echo "$asset_json_line" | jq -r '.browser_download_url')
                  asset_path="$temp_dir/$asset_name"
                  if [ -z "$asset_name" ] || [ "$asset_name" == "null" ] || [ -z "$asset_url" ] || [ "$asset_url" == "null" ]; then
                    echo "::warning::Skipping asset with missing name or URL: $asset_json_line" >&2
                    continue
                  fi
                  echo "Downloading: $asset_name" >&2
                  if curl -Lfs -o "$asset_path" "$asset_url"; then
                    calculated_checksum=$(sha256sum "$asset_path" | awk '{ print $1 }')
                    printf "%s\t%s\n" "$asset_name" "$calculated_checksum"
                  else
                    echo "::error::Failed to download $asset_name from $asset_url" >&2
                  fi
              done \
            )
          fi
          rm -rf "$temp_dir"
          echo "Checksums map building complete for tag: ${{ steps.release_info.outputs.tag }}"
          echo "Final Checksums Map (JSON):"
          echo "$checksums_map" | jq .
          echo "checksums_map_json<<EOF" >> $GITHUB_OUTPUT
          echo "$checksums_map" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      - name: Construct Final JSON Object
        id: final_json
        run: |
          checksums_map_json='${{ steps.checksums.outputs.checksums_map_json }}'
          raw_tag="${{ steps.release_info.outputs.tag }}"
          if [ -z "$raw_tag" ]; then
             echo "::error::Version tag is empty. Cannot construct JSON."
             exit 1
          fi
          # Remove 'v' prefix for the 'ver' field
          version_string="${raw_tag#v}" 
          # --- Static values ---
          r_value="wz3zjPO1YohLl14e" 
          bazaar_value="2b3909b84e01bbdabc22607bc4bca79160188cce"
          # Use the original tag (with 'v') for download URLs
          install_pkg_url="https://github.com/${{ github.repository }}/releases/download/$raw_tag/" 
          # --- Construct JSON ---
          final_json=$(jq -n \
                        --arg ver "$version_string" \
                        --arg release_url "${{ steps.release_info.outputs.release_url }}" \
                        --argjson checksums "$checksums_map_json" \
                        --arg r_val "$r_value" \
                        --arg installPkg "$install_pkg_url" \
                        --arg bazaar "$bazaar_value" \
                        '{
                          checksums: $checksums,
                          release_en_US: $release_url,
                          ver: $ver,
                          r: $r_val,
                          release: $release_url,
                          release_zh_CN: $release_url,
                          installPkg: $installPkg,
                          bazaar: $bazaar,
                          announcement: []
                        }')
          # <<< --- Updated Path --- >>>
          output_dir="apis/siyuan"
          output_filename="version" # No .json extension as requested
          output_path="$output_dir/$output_filename"
          # <<< -------------------- >>>
          mkdir -p "$output_dir"
          echo "$final_json" > "$output_path"
          echo "JSON data saved to $output_path"
          echo "output_file=$output_path" >> $GITHUB_OUTPUT
        shell: bash

      - name: Commit and Push JSON file
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore: Update Siyuan version API to ${{ steps.release_info.outputs.tag }}"
          branch: main
          # The output_file variable now holds 'apis/siyuan/version'
          file_pattern: ${{ steps.final_json.outputs.output_file }} 
          commit_user_name: github-actions[bot]
          commit_user_email: 41898282+github-actions[bot]@users.noreply.github.com
          commit_author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>