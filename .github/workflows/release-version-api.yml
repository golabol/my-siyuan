name: Generate Siyuan Version API File

on:
  # Manual trigger with optional version input
  workflow_dispatch:
    inputs:
      version:
        description: "Optional: Target release tag (e.g., v3.1.28). If empty, the 'latest' release will be used."
        required: false
        type: string

  # Trigger after 'release-pc.yml' completes successfully
  workflow_run:
    workflows: ["release-pc.yml"] # IMPORTANT: Ensure this exactly matches the filename of your release workflow
    types:
      - completed

# Permissions needed:
# contents: write - to push the generated file
# actions: read - to read data about the triggering workflow_run event
permissions:
  contents: write
  actions: read

jobs:
  generate-json:
    # Only run if:
    # 1. It was manually triggered (workflow_dispatch)
    # 2. It was triggered by a SUCCESSFUL run of release-pc.yml
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'

    runs-on: ubuntu-latest
    steps:
      # Checkout the repository - Need full history for rebase
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for git pull --rebase

      # Install jq for JSON processing
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Determine which release tag to process based on the trigger
      - name: Determine Target Release Tag
        id: determine_tag
        run: |
          TARGET_TAG=""
          # Check if triggered manually
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Triggered by workflow_dispatch."
            # Check if a version was provided in the manual trigger input
            if [[ -n "${{ github.event.inputs.version }}" ]]; then
              TARGET_TAG="${{ github.event.inputs.version }}"
              echo "Using provided input tag: $TARGET_TAG"
            else
              # No input tag provided on manual run, will use 'latest'
              echo "No input tag provided on manual run. Will use 'latest' release."
            fi
          # Check if triggered by completion of another workflow
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
             echo "Triggered by workflow_run completion of '${{ github.event.workflow_run.name }}'."
             # Assume the completed run just created the 'latest' release
             echo "Will use 'latest' release."
          else
             # Safety net for unexpected triggers
             echo "::error::Unknown trigger event: ${{ github.event_name }}"
             exit 1
          fi
          # Output the determined tag (or empty string for 'latest')
          echo "target_tag=$TARGET_TAG" >> $GITHUB_OUTPUT
        shell: bash

      # Fetch release information from GitHub API (either specific tag or latest)
      - name: Get Release Info via API
        id: release_info
        run: |
          TAG_TO_FETCH="${{ steps.determine_tag.outputs.target_tag }}"
          API_URL=""

          # Construct the API URL based on whether a specific tag was determined
          if [[ -n "$TAG_TO_FETCH" ]]; then
            echo "Fetching release info for specific tag: $TAG_TO_FETCH"
            API_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG_TO_FETCH"
          else
            echo "Fetching latest release info..."
            API_URL="https://api.github.com/repos/${{ github.repository }}/releases/latest"
          fi

          # Make the API call
          RELEASE_INFO=$(curl -s -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "$API_URL")

          # Validate the API response and extract necessary data
          if echo "$RELEASE_INFO" | jq -e '.tag_name' > /dev/null; then
            # Use the tag name returned by the API - this is the definitive tag being processed
            TAG_NAME=$(echo "$RELEASE_INFO" | jq -r '.tag_name')
            HTML_URL=$(echo "$RELEASE_INFO" | jq -r '.html_url')
            ASSETS_JSON=$(echo "$RELEASE_INFO" | jq -c '.assets') # Compact JSON array for assets
            echo "Successfully fetched info for release tag: $TAG_NAME"
            # Output the confirmed tag and other details for subsequent steps
            echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
            echo "release_url=$HTML_URL" >> $GITHUB_OUTPUT
            echo "assets_json=$ASSETS_JSON" >> $GITHUB_OUTPUT
          else
            # Handle API errors or cases where the release wasn't found
            echo "::error::Could not fetch release info (URL: $API_URL)."
            echo "API Response: $RELEASE_INFO"
            exit 1
          fi
        shell: bash

      # Download assets, calculate checksums, and build the checksum map
      - name: Calculate Checksums and Build JSON Map
        id: checksums
        run: |
          assets_json='${{ steps.release_info.outputs.assets_json }}'
          checksums_map='{}'
          temp_dir=$(mktemp -d)
          echo "Using temp dir for downloads: $temp_dir"

          if [ -z "$assets_json" ] || [ "$assets_json" == "null" ] || [ "$assets_json" == "[]" ]; then
            echo "::warning::No assets found for release tag ${{ steps.release_info.outputs.tag }}. Checksums map will be empty."
          else
            # Process each asset: download, calculate checksum, store in map
            while IFS=$'\t' read -r original_asset_name checksum; do
              if [ -n "$original_asset_name" ] && [ -n "$checksum" ]; then
                 # Modify the asset name to remove '-v' before version for the map key
                 map_key_name=$(echo "$original_asset_name" | sed 's/-v\([0-9]\)/-\1/')
                 echo "Original Name: '$original_asset_name', Map Key Name: '$map_key_name'"
                 # Add the key-value pair to the JSON map
                 checksums_map=$(echo "$checksums_map" | jq --arg key "$map_key_name" --arg value "$checksum" '. + {($key): $value}')
              else
                 echo "::warning::Skipping line with empty original name or checksum."
              fi
            done < <( \
              # Subshell to download assets and print name/checksum pairs
              echo "$assets_json" | jq -c '.[]' | while IFS= read -r asset_json_line; do
                  # Extract asset details
                  asset_name=$(echo "$asset_json_line" | jq -r '.name')
                  asset_url=$(echo "$asset_json_line" | jq -r '.browser_download_url')
                  asset_path="$temp_dir/$asset_name"

                  # Skip if name or URL is missing
                  if [ -z "$asset_name" ] || [ "$asset_name" == "null" ] || [ -z "$asset_url" ] || [ "$asset_url" == "null" ]; then
                    echo "::warning::Skipping asset with missing name or URL: $asset_json_line" >&2
                    continue
                  fi

                  echo "Processing asset: $asset_name" >&2
                  # Download the asset
                  if curl -fsSL -o "$asset_path" "$asset_url"; then
                    echo "Downloaded: $asset_name to $asset_path" >&2
                    # Calculate SHA256 checksum
                    calculated_checksum=$(sha256sum "$asset_path" | awk '{ print $1 }')
                    if [ -z "$calculated_checksum" ]; then
                       echo "::error::Failed to calculate checksum for $asset_name" >&2
                    else
                       # Output the original name and checksum, tab-separated for the outer loop
                       printf "%s\t%s\n" "$asset_name" "$calculated_checksum"
                    fi
                  else
                    # Handle download failure
                    curl_exit_code=$?
                    echo "::error::Failed to download $asset_name from $asset_url (curl exit code: $curl_exit_code)" >&2
                  fi
              done \
            )
          fi

          # Clean up the temporary directory
          echo "Removing temp dir: $temp_dir"
          rm -rf "$temp_dir"

          echo "Checksums map building complete for tag: ${{ steps.release_info.outputs.tag }}"
          echo "Final Checksums Map (JSON):"
          echo "$checksums_map" | jq . # Pretty-print for logs

          # Output the final map as a single-line JSON string
          echo "checksums_map_json<<EOF" >> $GITHUB_OUTPUT
          echo "$checksums_map" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      # Construct the final JSON object for the version API file
      - name: Construct Final JSON Object
        id: final_json
        run: |
          checksums_map_json='${{ steps.checksums.outputs.checksums_map_json }}'
          # Use the tag confirmed by the API call
          raw_tag="${{ steps.release_info.outputs.tag }}"

          if [ -z "$raw_tag" ]; then
             echo "::error::Version tag is empty after API check. Cannot construct JSON."
             exit 1
          fi

          # Remove 'v' prefix for the 'ver' field
          version_string="${raw_tag#v}"
          # Static values (replace if necessary)
          r_value="wz3zjPO1YohLl14e"
          bazaar_value="2b3909b84e01bbdabc22607bc4bca79160188cce"
          # Construct download base URL using the confirmed tag
          install_pkg_url="https://github.com/${{ github.repository }}/releases/download/$raw_tag/"

          # Build the final JSON using jq
          final_json=$(jq -n \
                        --arg ver "$version_string" \
                        --arg release_url "${{ steps.release_info.outputs.release_url }}" \
                        --argjson checksums "$checksums_map_json" \
                        --arg r_val "$r_value" \
                        --arg installPkg "$install_pkg_url" \
                        --arg bazaar "$bazaar_value" \
                        '{
                          checksums: $checksums,
                          release_en_US: $release_url,
                          ver: $ver,
                          r: $r_val,
                          release: $release_url,
                          release_zh_CN: $release_url,
                          installPkg: $installPkg,
                          bazaar: $bazaar,
                          announcement: []
                        }') # Assuming announcement is always empty

          # Define output path and ensure directory exists
          output_dir="apis/siyuan"
          output_filename="version" # File name without extension
          output_path="$output_dir/$output_filename"
          mkdir -p "$output_dir"

          # Write the JSON to the file
          echo "$final_json" > "$output_path"
          echo "JSON data saved to $output_path"

          # Output the path for subsequent steps
          echo "output_file=$output_path" >> $GITHUB_OUTPUT
        shell: bash

      # --- Git Operations to Commit the File ---

      # Temporarily stash local changes (the generated file)
      - name: Stash local changes before pulling
        id: stash
        run: |
          # Check if there are any staged or unstaged changes
          if ! git diff --quiet || ! git diff --cached --quiet; then
            echo "Changes detected, stashing..."
            # Stash including untracked files, with a message
            git stash push -u -m "temp-version-update-${{ github.run_id }}"
            # Record that stashing occurred
            echo "stashed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes to stash."
            echo "stashed=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      # Pull latest changes from the target branch (main), rebasing local commits
      - name: Pull latest changes from main
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email '41898282+github-actions[bot]@users.noreply.github.com'
          echo "Pulling and rebasing onto origin/main..."
          # Attempt the pull/rebase
          if ! git pull --rebase origin main; then
            echo "::error::'git pull --rebase' failed. Trying to restore stash to inspect conflicts."
            # Attempt to restore stash if needed, even on pull failure
            if [ "${{ steps.stash.outputs.stashed }}" == "true" ]; then
               git stash pop || echo "::warning::Failed to pop stash after pull failure."
               echo "::warning::Inspect the state manually. Conflicts may exist."
               git status
            fi
            exit 1 # Exit after pull failure
          fi
          echo "Pull/rebase successful."
        shell: bash

      # Restore the stashed changes (the generated file) after pulling
      - name: Restore stashed changes
        # Only run if something was actually stashed
        if: steps.stash.outputs.stashed == 'true'
        run: |
          echo "Popping stash..."
          # Try to pop the stash; fail if conflicts occur
          if ! git stash pop; then
             echo "::error::'git stash pop' failed. This likely indicates a conflict between pulled changes and the generated file."
             echo "::error::Resolve conflicts manually in the repository."
             echo "Current Git Status:"
             git status
             exit 1 # Exit if stash pop fails (indicates conflict)
          fi
          echo "Stash pop successful."
        shell: bash

      # Use the git-auto-commit action to commit and push the file
      - name: Commit and Push JSON file
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          # Use the actual tag processed for the commit message
          commit_message: "chore: Update Siyuan version API to ${{ steps.release_info.outputs.tag }}"
          branch: main # Target branch to commit to
          # Specify the file to commit
          file_pattern: ${{ steps.final_json.outputs.output_file }}
          # Git author information
          commit_user_name: github-actions[bot]
          commit_user_email: 41898282+github-actions[bot]@users.noreply.github.com
          commit_author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
          # Ensure push is attempted
          push_options: '' # Use default push