diff --git a/.gitignore b/.gitignore
index b4718a8ca..3b2e753ef 100644
--- a/.gitignore
+++ b/.gitignore
@@ -39,3 +39,6 @@ yarn.lock
 
 # Workflows
 **/__pycache__
+
+# Ignore Patches
+*.patch
\ No newline at end of file
diff --git a/app/src/config/appearance.ts b/app/src/config/appearance.ts
index acdac0d50..a430355dd 100644
--- a/app/src/config/appearance.ts
+++ b/app/src/config/appearance.ts
@@ -119,6 +119,35 @@ export const appearance = {
         ${window.siyuan.languages.showInFolder}
     </button>
 </div>
+<div class="b3-label config__item${isBrowser() ? " fn__none" : " fn__flex"}">
+    <div class="fn__flex-1">
+        Remote Icon Provider
+        <div class="b3-label__text">Select remote provider for icon search</div>
+    </div>
+    <span class="fn__space"></span>
+    <select id="remoteIconProvider" class="b3-select fn__flex-center fn__size200">
+        <option value=""></option>
+        <option value="iconFinder" ${window.siyuan.config.appearance.remoteIconProvider === 'iconFinder' ? "selected" : ""}>IconFinder</option>
+        <option value="icon8" ${window.siyuan.config.appearance.remoteIconProvider === 'icon8' ? "selected" : ""}>Icon8</option>
+        <option value="flatIcon" ${window.siyuan.config.appearance.remoteIconProvider === 'flatIcon' ? "selected" : ""}>FlatIcon</option>
+    </select>
+</div>
+<div class="b3-label config__item${isBrowser() ? " fn__none" : " fn__flex"}">
+    <div class="fn__block">
+        IconFinder API Key
+        <div class="b3-label__text">Your IconFinder.com Api Key</div>
+        <span class="fn__hr"></span>
+        <input class="b3-text-field fn__block" id="iconFinderAPIKey"/>
+    </div>
+</div>
+<div class="b3-label config__item${isBrowser() ? " fn__none" : " fn__flex"}">
+    <div class="fn__block">
+        FlatIcon API Key
+        <div class="b3-label__text">Your FlatIcon.com Api Key</div>
+        <span class="fn__hr"></span>
+        <input class="b3-text-field fn__block" id="flatIconAPIKey"/>
+    </div>
+</div>
 <div class="b3-label fn__flex config__item">
    <div class="fn__flex-1">
         ${window.siyuan.languages.resetLayout}
@@ -184,6 +213,9 @@ export const appearance = {
             lightThemes: window.siyuan.config.appearance.lightThemes,
             icons: window.siyuan.config.appearance.icons,
             lang: (appearance.element.querySelector("#lang") as HTMLSelectElement).value,
+            remoteIconProvider: (appearance.element.querySelector("#remoteIconProvider") as HTMLSelectElement).value,
+            iconFinderAPIKey: (appearance.element.querySelector("#iconFinderAPIKey") as HTMLInputElement).value,
+            flatIconAPIKey: (appearance.element.querySelector("#flatIconAPIKey") as HTMLInputElement).value,
             closeButtonBehavior: (appearance.element.querySelector("#closeButtonBehavior") as HTMLInputElement).checked ? 1 : 0,
             hideStatusBar: (appearance.element.querySelector("#hideStatusBar") as HTMLInputElement).checked,
         }, async response => {
@@ -252,6 +284,13 @@ export const appearance = {
                 appearance._send();
             });
         });
+        (appearance.element.querySelector("#iconFinderAPIKey") as HTMLInputElement).value = window.siyuan.config.appearance.iconFinderAPIKey;
+        (appearance.element.querySelector("#flatIconAPIKey") as HTMLInputElement).value = window.siyuan.config.appearance.flatIconAPIKey;
+        appearance.element.querySelectorAll("input").forEach((item) => {
+            item.addEventListener("change", () => {
+                appearance._send();
+            });
+        });
     },
     onSetappearance(data: Config.IAppearance) {
         if (data.lang !== window.siyuan.config.appearance.lang) {
diff --git a/app/src/constants.ts b/app/src/constants.ts
index dc2e37fdd..36ee5250e 100644
--- a/app/src/constants.ts
+++ b/app/src/constants.ts
@@ -600,7 +600,7 @@ export abstract class Constants {
             data: [
                 [{
                     type: "file",
-                    size: {width: 232, height: 0},
+                    size: {width: 265, height: 0},
                     show: true,
                     icon: "iconFiles",
                     hotkeyLangId: "fileTree",
diff --git a/app/src/emoji/index.ts b/app/src/emoji/index.ts
index df3f8baf7..09e88a68d 100644
--- a/app/src/emoji/index.ts
+++ b/app/src/emoji/index.ts
@@ -1,276 +1,535 @@
-import {getRandom, isMobile} from "../util/functions";
-import {fetchPost} from "../util/fetch";
-import {Constants} from "../constants";
-import {Files} from "../layout/dock/Files";
+import { getRandom, isMobile } from "../util/functions";
+import { fetchPost, fetchSyncPost } from "../util/fetch";
+import { Constants } from "../constants";
+import { Files } from "../layout/dock/Files";
 /// #if !MOBILE
-import {getDockByType} from "../layout/tabUtil";
+import { getDockByType } from "../layout/tabUtil";
 /// #endif
-import {getAllEditor, getAllModels} from "../layout/getAll";
-import {setNoteBook} from "../util/pathName";
-import {Dialog} from "../dialog";
-import {setPosition} from "../util/setPosition";
-import {setStorageVal} from "../protyle/util/compatibility";
+import { getAllEditor, getAllModels } from "../layout/getAll";
+import { setNoteBook } from "../util/pathName";
+import { Dialog } from "../dialog";
+import { setPosition } from "../util/setPosition";
+import { setStorageVal } from "../protyle/util/compatibility";
 import * as dayjs from "dayjs";
 
+// Add debounce utility
+function debounce<T extends (...args: any[]) => any>(
+  func: T,
+  wait: number
+): (...args: Parameters<T>) => void {
+  let timeout: number;
+  return function executedFunction(...args: Parameters<T>) {
+    const later = () => {
+      clearTimeout(timeout);
+      func(...args);
+    };
+    clearTimeout(timeout);
+    timeout = setTimeout(later, wait);
+  };
+}
+
 export const getRandomEmoji = () => {
-    const emojis = window.siyuan.emojis[getRandom(0, window.siyuan.emojis.length - 1)];
-    if (typeof emojis.items[getRandom(0, emojis.items.length - 1)] === "undefined") {
-        return "1f600";
-    }
-    return emojis.items[getRandom(0, emojis.items.length - 1)].unicode;
+  const emojis =
+    window.siyuan.emojis[getRandom(0, window.siyuan.emojis.length - 1)];
+  if (
+    typeof emojis.items[getRandom(0, emojis.items.length - 1)] === "undefined"
+  ) {
+    return "1f600";
+  }
+  return emojis.items[getRandom(0, emojis.items.length - 1)].unicode;
 };
 
-export const unicode2Emoji = (unicode: string, className = "", needSpan = false, lazy = false) => {
-    if (!unicode) {
-        return "";
-    }
-    let emoji = "";
-    if (unicode.startsWith("api/icon/getDynamicIcon")) {
-        emoji = `<img class="${className}" ${lazy ? "data-" : ""}src="${unicode}"/>`;
-    } else if (unicode.indexOf(".") > -1) {
-        emoji = `<img class="${className}" ${lazy ? "data-" : ""}src="/emojis/${unicode}"/>`;
-    } else {
-        try {
-            unicode.split("-").forEach(item => {
-                if (item.length < 5) {
-                    emoji += String.fromCodePoint(parseInt("0" + item, 16));
-                } else {
-                    emoji += String.fromCodePoint(parseInt(item, 16));
-                }
-            });
-            if (needSpan) {
-                emoji = `<span class="${className}">${emoji}</span>`;
-            }
-        } catch (e) {
-            // 自定义表情搜索报错 https://github.com/siyuan-note/siyuan/issues/5883
-            // 这里忽略错误不做处理
+export const unicode2Emoji = (
+  unicode: string,
+  className = "",
+  needSpan = false,
+  lazy = false
+) => {
+  if (!unicode) {
+    return "";
+  }
+  let emoji = "";
+  if (unicode.startsWith("api/icon/getDynamicIcon")) {
+    emoji = `<img class="${className}" ${
+      lazy ? "data-" : ""
+    }src="${unicode}"/>`;
+  } else if (unicode.indexOf(".") > -1) {
+    emoji = `<img class="${className}" ${
+      lazy ? "data-" : ""
+    }src="/emojis/${unicode}"/>`;
+  } else {
+    try {
+      unicode.split("-").forEach((item) => {
+        if (item.length < 5) {
+          emoji += String.fromCodePoint(parseInt("0" + item, 16));
+        } else {
+          emoji += String.fromCodePoint(parseInt(item, 16));
         }
+      });
+      if (needSpan) {
+        emoji = `<span class="${className}">${emoji}</span>`;
+      }
+    } catch (e) {
+      // 自定义表情搜索报错 https://github.com/siyuan-note/siyuan/issues/5883
+      // 这里忽略错误不做处理
     }
-    return emoji;
+  }
+  return emoji;
 };
 
 export const lazyLoadEmoji = (element: HTMLElement) => {
-    const emojiIntersectionObserver = new IntersectionObserver((entries) => {
-        entries.forEach((entrie: IntersectionObserverEntry & { target: HTMLImageElement }) => {
-            const index = entrie.target.getAttribute("data-index");
-            if ((typeof entrie.isIntersecting === "undefined" ? entrie.intersectionRatio !== 0 : entrie.isIntersecting) && index) {
-                let html = "";
-                window.siyuan.emojis[parseInt(index)].items.forEach(emoji => {
-                    html += `<button data-unicode="${emoji.unicode}" class="emojis__item ariaLabel" aria-label="${getEmojiDesc(emoji)}">
+  const emojiIntersectionObserver = new IntersectionObserver((entries) => {
+    entries.forEach(
+      (entrie: IntersectionObserverEntry & { target: HTMLImageElement }) => {
+        const index = entrie.target.getAttribute("data-index");
+        if (
+          (typeof entrie.isIntersecting === "undefined"
+            ? entrie.intersectionRatio !== 0
+            : entrie.isIntersecting) &&
+          index
+        ) {
+          let html = "";
+          window.siyuan.emojis[parseInt(index)].items.forEach((emoji) => {
+            html += `<button data-unicode="${
+              emoji.unicode
+            }" class="emojis__item ariaLabel" aria-label="${getEmojiDesc(
+              emoji
+            )}">
 ${unicode2Emoji(emoji.unicode)}</button>`;
-                });
-                entrie.target.innerHTML = html;
-                entrie.target.removeAttribute("data-index");
-                entrie.target.style.minHeight = "";
-            }
-        });
-    });
-    element.querySelectorAll(".emojis__content").forEach((panelElement) => {
-        emojiIntersectionObserver.observe(panelElement);
-    });
+          });
+          entrie.target.innerHTML = html;
+          entrie.target.removeAttribute("data-index");
+          entrie.target.style.minHeight = "";
+        }
+      }
+    );
+  });
+  element.querySelectorAll(".emojis__content").forEach((panelElement) => {
+    emojiIntersectionObserver.observe(panelElement);
+  });
 };
 
 export const lazyLoadEmojiImg = (element: Element) => {
-    const emojiIntersectionObserver = new IntersectionObserver((entries) => {
-        entries.forEach((entrie: IntersectionObserverEntry & { target: HTMLImageElement }) => {
-            const src = entrie.target.getAttribute("data-src");
-            if ((typeof entrie.isIntersecting === "undefined" ? entrie.intersectionRatio !== 0 : entrie.isIntersecting) && src) {
-                entrie.target.src = src;
-                entrie.target.removeAttribute("data-src");
-            }
-        });
-    });
-    element.querySelectorAll("img").forEach((panelElement) => {
-        emojiIntersectionObserver.observe(panelElement);
-    });
+  const emojiIntersectionObserver = new IntersectionObserver((entries) => {
+    entries.forEach(
+      (entrie: IntersectionObserverEntry & { target: HTMLImageElement }) => {
+        const src = entrie.target.getAttribute("data-src");
+        if (
+          (typeof entrie.isIntersecting === "undefined"
+            ? entrie.intersectionRatio !== 0
+            : entrie.isIntersecting) &&
+          src
+        ) {
+          entrie.target.src = src;
+          entrie.target.removeAttribute("data-src");
+        }
+      }
+    );
+  });
+  element.querySelectorAll("img").forEach((panelElement) => {
+    emojiIntersectionObserver.observe(panelElement);
+  });
 };
 
-export const filterEmoji = (key = "", max?: number) => {
-    let html = "";
-    const recentEmojis: IEmojiItem[] = [];
-    if (key) {
-        html = `<div class="emojis__title">${window.siyuan.languages.emoji}</div><div class="emojis__content">`;
+export const filterEmoji = async (
+  key = "",
+  max?: number,
+  triggered_by: "slash_hint" | "doc_notebook" = "doc_notebook"
+) => {
+  let html = "";
+  const recentEmojis: IEmojiItem[] = [];
+  if (key) {
+    html = `<div class="emojis__title">${window.siyuan.languages.emoji}</div><div class="emojis__content">`;
+  }
+  let maxCount = 0;
+  let keyHTML = "";
+  const customStore: IEmojiItem[] = [];
+  let externalIconsContent = "";
+
+  // Process local emojis
+  window.siyuan.emojis.forEach((category, index) => {
+    if (!key) {
+      html += `<div class="emojis__title" data-type="${
+        index + 1
+      }">${getEmojiTitle(index)}</div><div style="min-height:${
+        index === 0 ? "30px" : "300px"
+      }" class="emojis__content"${
+        index > 1 ? ' data-index="' + index + '"' : ""
+      }>`;
     }
-    let maxCount = 0;
-    let keyHTML = "";
-    const customStore: IEmojiItem[] = [];
-    window.siyuan.emojis.forEach((category, index) => {
-        if (!key) {
-            html += `<div class="emojis__title" data-type="${index + 1}">${getEmojiTitle(index)}</div><div style="min-height:${index === 0 ? "30px" : "300px"}" class="emojis__content"${index > 1 ? ' data-index="' + index + '"' : ""}>`;
+    if (category.items.length === 0 && index === 0 && !key) {
+      html += `<div style="margin-left: 4px">${window.siyuan.languages.setEmojiTip}</div>`;
+    }
+
+    category.items.forEach((emoji) => {
+      if (key) {
+        if (
+          window.siyuan.config.editor.emoji.includes(emoji.unicode) &&
+          (unicode2Emoji(emoji.unicode) === key ||
+            emoji.keywords.toLowerCase().indexOf(key.toLowerCase()) > -1 ||
+            emoji.description.toLowerCase().indexOf(key.toLowerCase()) > -1 ||
+            emoji.description_zh_cn.toLowerCase().indexOf(key.toLowerCase()) >
+              -1 ||
+            emoji.description_ja_jp.toLowerCase().indexOf(key.toLowerCase()) >
+              -1)
+        ) {
+          recentEmojis.push(emoji);
         }
-        if (category.items.length === 0 && index === 0 && !key) {
-            html += `<div style="margin-left: 4px">${window.siyuan.languages.setEmojiTip}</div>`;
+        if (max && maxCount > max) {
+          return;
         }
-
-        category.items.forEach(emoji => {
-            if (key) {
-                if (window.siyuan.config.editor.emoji.includes(emoji.unicode) &&
-                    (unicode2Emoji(emoji.unicode) === key ||
-                        emoji.keywords.toLowerCase().indexOf(key.toLowerCase()) > -1 ||
-                        emoji.description.toLowerCase().indexOf(key.toLowerCase()) > -1 ||
-                        emoji.description_zh_cn.toLowerCase().indexOf(key.toLowerCase()) > -1 ||
-                        emoji.description_ja_jp.toLowerCase().indexOf(key.toLowerCase()) > -1)
-                ) {
-                    recentEmojis.push(emoji);
-                }
-                if (max && maxCount > max) {
-                    return;
-                }
-                if (unicode2Emoji(emoji.unicode) === key ||
-                    emoji.keywords.toLowerCase().indexOf(key.toLowerCase()) > -1 ||
-                    emoji.description.toLowerCase().indexOf(key.toLowerCase()) > -1 ||
-                    emoji.description_zh_cn.toLowerCase().indexOf(key.toLowerCase()) > -1 ||
-                    emoji.description_ja_jp.toLowerCase().indexOf(key.toLowerCase()) > -1) {
-                    if (category.id === "custom") {
-                        customStore.push(emoji);
-                    } else {
-                        keyHTML += `<button data-unicode="${emoji.unicode}" class="emojis__item ariaLabel" aria-label="${getEmojiDesc(emoji)}">
+        if (
+          unicode2Emoji(emoji.unicode) === key ||
+          emoji.keywords.toLowerCase().indexOf(key.toLowerCase()) > -1 ||
+          emoji.description.toLowerCase().indexOf(key.toLowerCase()) > -1 ||
+          emoji.description_zh_cn.toLowerCase().indexOf(key.toLowerCase()) >
+            -1 ||
+          emoji.description_ja_jp.toLowerCase().indexOf(key.toLowerCase()) > -1
+        ) {
+          if (category.id === "custom") {
+            customStore.push(emoji);
+          } else {
+            keyHTML += `<button data-unicode="${
+              emoji.unicode
+            }" class="emojis__item ariaLabel" aria-label="${getEmojiDesc(
+              emoji
+            )}">
 ${unicode2Emoji(emoji.unicode, undefined, false, true)}</button>`;
-                    }
-                    maxCount++;
-                }
-            } else {
-                if (window.siyuan.config.editor.emoji.includes(emoji.unicode)) {
-                    recentEmojis.push(emoji);
-                }
-                if (index < 2) {
-                    html += `<button data-unicode="${emoji.unicode}" class="emojis__item ariaLabel" aria-label="${getEmojiDesc(emoji)}">
+          }
+          maxCount++;
+        }
+      } else {
+        if (window.siyuan.config.editor.emoji.includes(emoji.unicode)) {
+          recentEmojis.push(emoji);
+        }
+        if (index < 2) {
+          html += `<button data-unicode="${
+            emoji.unicode
+          }" class="emojis__item ariaLabel" aria-label="${getEmojiDesc(emoji)}">
 ${unicode2Emoji(emoji.unicode, undefined, false, true)}</button>`;
-                }
-            }
-        });
-        if (!key) {
-            html += "</div>";
         }
+      }
     });
-    if (key) {
-        customStore.sort((a, b) => {
-            const aKeywords = a.keywords.split("/");
-            const bKeywords = b.keywords.split("/");
-            if (aKeywords[aKeywords.length - 1].toLowerCase().indexOf(key.toLowerCase()) < bKeywords[bKeywords.length - 1].toLowerCase().indexOf(key.toLowerCase())) {
-                return -1;
+    if (!key) {
+      html += "</div>";
+    }
+  });
+
+  // Process custom emojis
+  if (key) {
+    customStore
+      .sort((a, b) => {
+        const aKeywords = a.keywords.split("/");
+        const bKeywords = b.keywords.split("/");
+        if (
+          aKeywords[aKeywords.length - 1]
+            .toLowerCase()
+            .indexOf(key.toLowerCase()) <
+          bKeywords[bKeywords.length - 1]
+            .toLowerCase()
+            .indexOf(key.toLowerCase())
+        ) {
+          return -1;
+        }
+        return 0;
+      })
+      .sort((a, b) => {
+        const aKeywords = a.keywords.split("/");
+        const bKeywords = b.keywords.split("/");
+        if (
+          aKeywords[aKeywords.length - 1]
+            .toLowerCase()
+            .indexOf(key.toLowerCase()) ===
+            bKeywords[bKeywords.length - 1]
+              .toLowerCase()
+              .indexOf(key.toLowerCase()) &&
+          aKeywords[aKeywords.length - 1].length <
+            bKeywords[bKeywords.length - 1].length
+        ) {
+          return -1;
+        }
+        return 0;
+      })
+      .forEach((item) => {
+        html += `<button data-unicode="${
+          item.unicode
+        }" class="emojis__item ariaLabel" aria-label="${getEmojiDesc(item)}">
+${unicode2Emoji(item.unicode, undefined, false, true)}</button>`;
+      });
+    html = html + keyHTML + "</div>";
+  }
+
+  if (key && triggered_by !== "slash_hint") {
+    // Check for API key and search string before attempting external search
+    if (window.siyuan.config.appearance.remoteIconProvider !== "") {
+      if (window.siyuan.config.appearance.remoteIconProvider === "iconFinder") {
+        if (
+          key &&
+          key.length > 2 &&
+          window.siyuan.config.appearance.iconFinderAPIKey &&
+          window.siyuan.config.appearance.iconFinderAPIKey.trim() !== ""
+        ) {
+          try {
+            const externalIcons = await searchIconFinder(key, max || 50);
+
+            if (externalIcons.length > 0) {
+              externalIconsContent += `<div class="emojis__title fn__block">External Icons (${window.siyuan.config.appearance.remoteIconProvider})</div><div class="emojis__content">`;
+              externalIconsContent += '<div class="fn__hr"></div>';
+
+              externalIcons.forEach((icon) => {
+                const urls = extractUrlsFromKeywords(icon.keywords);
+                if (urls) {
+                  externalIconsContent += `<button 
+                  data-unicode="${icon.unicode}"
+                  data-download-url="${urls.downloadUrl}"
+                  class="emojis__item ariaLabel" 
+                  onmouseover="this.style.border='0.5px solid var(--b3-theme-on-background)'"
+                  onmouseout="this.style.border='none'"
+                  aria-label="${getEmojiDesc(icon)}">
+                  <img src="${urls.previewUrl}" 
+                    style="width: 24px; height: 24px; object-fit: contain;"/>
+                </button>`;
+                }
+              });
+
+              externalIconsContent += "</div>";
             }
-            return 0;
-        }).sort((a, b) => {
-            const aKeywords = a.keywords.split("/");
-            const bKeywords = b.keywords.split("/");
-            if (aKeywords[aKeywords.length - 1].toLowerCase().indexOf(key.toLowerCase()) === bKeywords[bKeywords.length - 1].toLowerCase().indexOf(key.toLowerCase()) && aKeywords[aKeywords.length - 1].length < bKeywords[bKeywords.length - 1].length) {
-                return -1;
+          } catch (error) {
+            console.error("Error fetching external icons:", error);
+          }
+        }
+      } else if (
+        window.siyuan.config.appearance.remoteIconProvider === "flatIcon"
+      ) {
+        if (
+          key &&
+          key.length > 2 &&
+          window.siyuan.config.appearance.flatIconAPIKey &&
+          window.siyuan.config.appearance.flatIconAPIKey.trim() !== ""
+        ) {
+          try {
+            const externalIcons = await searchFlatIcon(key, max || 50);
+
+            if (externalIcons.length > 0) {
+              externalIconsContent += `<div class="emojis__title fn__block">External Icons (${window.siyuan.config.appearance.remoteIconProvider})</div><div class="emojis__content">`;
+              externalIconsContent += '<div class="fn__hr"></div>';
+
+              externalIcons.forEach((icon) => {
+                const urls = extractUrlsFromKeywords(icon.keywords);
+                if (urls) {
+                  externalIconsContent += `<button 
+                  data-unicode="${icon.unicode}"
+                  data-download-url="${urls.downloadUrl}"
+                  class="emojis__item ariaLabel" 
+                  onmouseover="this.style.border='0.5px solid var(--b3-theme-on-background)'"
+                  onmouseout="this.style.border='none'"
+                  aria-label="${getEmojiDesc(icon)}">
+                  <img src="${urls.previewUrl}" 
+                    style="width: 24px; height: 24px; object-fit: contain;"/>
+                </button>`;
+                }
+              });
+
+              externalIconsContent += "</div>";
             }
-            return 0;
-        }).forEach(item => {
-            html += `<button data-unicode="${item.unicode}" class="emojis__item ariaLabel" aria-label="${getEmojiDesc(item)}">
-${unicode2Emoji(item.unicode, undefined, false, true)}</button>`;
-        });
-        html = html + keyHTML + "</div>";
+          } catch (error) {
+            console.error("Error fetching external icons:", error);
+          }
+        }
+      } else if (
+        window.siyuan.config.appearance.remoteIconProvider === "icon8"
+      ) {
+        // if (
+        //   key &&
+        //   key.length > 2 &&
+        //   window.siyuan.config.appearance.icon8APIKey &&
+        //   window.siyuan.config.appearance.icon8APIKey.trim() !== ""
+        // ) {
+        // }
+        try {
+          const externalIcons = await searchIcon8(key, max || 50);
+
+          if (externalIcons.length > 0) {
+            externalIconsContent += `<div class="emojis__title fn__block">External Icons (${window.siyuan.config.appearance.remoteIconProvider})</div><div class="emojis__content">`;
+            externalIconsContent += '<div class="fn__hr"></div>';
+
+            externalIcons.forEach((icon) => {
+              const urls = extractUrlsFromKeywords(icon.keywords);
+              if (urls) {
+                externalIconsContent += `<button 
+                data-unicode="${icon.unicode}"
+                data-download-url="${urls.downloadUrl}"
+                class="emojis__item ariaLabel" 
+                onmouseover="this.style.border='0.5px solid var(--b3-theme-on-background)'"
+                onmouseout="this.style.border='none'"
+                aria-label="${getEmojiDesc(icon)}">
+                <img src="${urls.previewUrl}" 
+                  style="width: 24px; height: 24px; object-fit: contain;"/>
+              </button>`;
+              }
+            });
+
+            externalIconsContent += "</div>";
+          }
+        } catch (error) {
+          console.error("Error fetching external icons:", error);
+        }
+      }
     }
-    let recentHTML = "";
-    if (recentEmojis.length > 0) {
-        recentHTML = `<div class="emojis__title" data-type="0">${window.siyuan.languages.recentEmoji}</div><div class="emojis__content">`;
-        window.siyuan.config.editor.emoji.forEach(emojiUnicode => {
-            const emoji = recentEmojis.filter((item) => item.unicode === emojiUnicode);
-            if (emoji[0]) {
-                recentHTML += `<button data-unicode="${emoji[0].unicode}" class="emojis__item ariaLabel" aria-label="${getEmojiDesc(emoji[0])}">
+    html += externalIconsContent;
+  }
+
+  // Process recent emojis
+  let recentHTML = "";
+  if (recentEmojis.length > 0) {
+    recentHTML = `<div class="emojis__title" data-type="0">${window.siyuan.languages.recentEmoji}</div><div class="emojis__content">`;
+    window.siyuan.config.editor.emoji.forEach((emojiUnicode) => {
+      const emoji = recentEmojis.filter(
+        (item) => item.unicode === emojiUnicode
+      );
+      if (emoji[0]) {
+        recentHTML += `<button data-unicode="${
+          emoji[0].unicode
+        }" class="emojis__item ariaLabel" aria-label="${getEmojiDesc(
+          emoji[0]
+        )}">
 ${unicode2Emoji(emoji[0].unicode, undefined, false, true)}
 </button>`;
-            }
-        });
-        recentHTML += "</div>";
-    }
+      }
+    });
+    recentHTML += "</div>";
+  }
 
-    if (recentHTML + html === "") {
-        return `<div class="emojis__title">${window.siyuan.languages.emptyContent}</div>`;
-    }
-    return recentHTML + html;
+  if (recentHTML + html === "") {
+    return `<div class="emojis__title">${window.siyuan.languages.emptyContent}</div>`;
+  }
+  return recentHTML + html;
 };
 
 export const addEmoji = (unicode: string) => {
-    window.siyuan.config.editor.emoji.unshift(unicode);
-    if (window.siyuan.config.editor.emoji.length > Constants.SIZE_UNDO) {
-        window.siyuan.config.editor.emoji.pop();
-    }
-    window.siyuan.config.editor.emoji = Array.from(new Set(window.siyuan.config.editor.emoji));
+  window.siyuan.config.editor.emoji.unshift(unicode);
+  if (window.siyuan.config.editor.emoji.length > Constants.SIZE_UNDO) {
+    window.siyuan.config.editor.emoji.pop();
+  }
+  window.siyuan.config.editor.emoji = Array.from(
+    new Set(window.siyuan.config.editor.emoji)
+  );
 
-    fetchPost("/api/setting/setEmoji", {emoji: window.siyuan.config.editor.emoji});
+  fetchPost("/api/setting/setEmoji", {
+    emoji: window.siyuan.config.editor.emoji,
+  });
 };
 
 const genWeekdayOptions = (lang: string, weekdayType: string) => {
-    const dynamicWeekdayLang = {
-        "1": ["Sun", "周日", "週日"],
-        "2": ["SUN", "周天", "週天"],
-        "3": ["Sunday", "星期日", "星期日"],
-        "4": ["SUNDAY", "星期天", "星期天"],
-    };
-    let currentLang = 0;
-    if (lang === "") {
-        lang = window.siyuan.config.lang;
-    }
-    if (lang === "zh_CN") {
-        currentLang = 1;
-    } else if (lang === "zh_CHT") {
-        currentLang = 2;
-    }
-    return `<option value="1" ${weekdayType === "1" ? " selected" : ""}>${dynamicWeekdayLang[1][currentLang]}</option>
-<option value="2" ${weekdayType === "2" ? " selected" : ""}>${dynamicWeekdayLang[2][currentLang]}</option>
-<option value="3" ${weekdayType === "3" ? " selected" : ""}>${dynamicWeekdayLang[3][currentLang]}</option>
-<option value="4" ${weekdayType === "4" ? " selected" : ""}>${dynamicWeekdayLang[4][currentLang]}</option>`;
+  const dynamicWeekdayLang = {
+    "1": ["Sun", "周日", "週日"],
+    "2": ["SUN", "周天", "週天"],
+    "3": ["Sunday", "星期日", "星期日"],
+    "4": ["SUNDAY", "星期天", "星期天"],
+  };
+  let currentLang = 0;
+  if (lang === "") {
+    lang = window.siyuan.config.lang;
+  }
+  if (lang === "zh_CN") {
+    currentLang = 1;
+  } else if (lang === "zh_CHT") {
+    currentLang = 2;
+  }
+  return `<option value="1" ${weekdayType === "1" ? " selected" : ""}>${
+    dynamicWeekdayLang[1][currentLang]
+  }</option>
+<option value="2" ${weekdayType === "2" ? " selected" : ""}>${
+    dynamicWeekdayLang[2][currentLang]
+  }</option>
+<option value="3" ${weekdayType === "3" ? " selected" : ""}>${
+    dynamicWeekdayLang[3][currentLang]
+  }</option>
+<option value="4" ${weekdayType === "4" ? " selected" : ""}>${
+    dynamicWeekdayLang[4][currentLang]
+  }</option>`;
 };
 
-const renderEmojiContent = (previousIndex: string, previousContentElement: Element) => {
-    if (!previousIndex) {
-        return;
-    }
-    let html = "";
-    window.siyuan.emojis[parseInt(previousIndex)].items.forEach(emoji => {
-        html += `<button data-unicode="${emoji.unicode}" class="emojis__item ariaLabel" aria-label="${getEmojiDesc(emoji)}">${unicode2Emoji(emoji.unicode)}</button>`;
-    });
-    previousContentElement.innerHTML = html;
-    previousContentElement.removeAttribute("data-index");
-    previousContentElement.removeAttribute("style");
+const renderEmojiContent = (
+  previousIndex: string,
+  previousContentElement: Element
+) => {
+  if (!previousIndex) {
+    return;
+  }
+  let html = "";
+  window.siyuan.emojis[parseInt(previousIndex)].items.forEach((emoji) => {
+    html += `<button data-unicode="${
+      emoji.unicode
+    }" class="emojis__item ariaLabel" aria-label="${getEmojiDesc(
+      emoji
+    )}">${unicode2Emoji(emoji.unicode)}</button>`;
+  });
+  previousContentElement.innerHTML = html;
+  previousContentElement.removeAttribute("data-index");
+  previousContentElement.removeAttribute("style");
 };
 
-export const openEmojiPanel = (id: string, type: "doc" | "notebook" | "av", position: IPosition, callback?: (emoji: string) => void, dynamicImgElement?: HTMLElement) => {
-    if (type !== "av") {
-        window.siyuan.menus.menu.remove();
-    } else {
-        window.siyuan.menus.menu.removeScrollEvent();
-    }
+export const openEmojiPanel = async (
+  id: string,
+  type: "doc" | "notebook" | "av",
+  position: IPosition,
+  callback?: (emoji: string) => void,
+  dynamicImgElement?: HTMLElement
+) => {
+  if (type !== "av") {
+    window.siyuan.menus.menu.remove();
+  } else {
+    window.siyuan.menus.menu.removeScrollEvent();
+  }
 
-    const dynamicURL = "api/icon/getDynamicIcon?";
-    const dynamicCurrentObj: IObject = {
-        color: "#d23f31",
-        lang: "",
-        date: "",
-        weekdayType: "1",
-        type: "1",
-        content: "SiYuan",
-    };
-    if (dynamicImgElement && dynamicImgElement.getAttribute("src").startsWith(dynamicURL)) {
-        const dynamicCurrentUrl = new URLSearchParams(dynamicImgElement.getAttribute("src").replace(dynamicURL, ""));
-        dynamicCurrentObj.color = dynamicCurrentUrl.get("color") || "#d23f31";
-        if (!dynamicCurrentObj.color.startsWith("#")) {
-            dynamicCurrentObj.color = "#" + dynamicCurrentObj.color;
-        }
-        dynamicCurrentObj.lang = dynamicCurrentUrl.get("lang") || "";
-        dynamicCurrentObj.date = dynamicCurrentUrl.get("date") || "";
-        dynamicCurrentObj.weekdayType = dynamicCurrentUrl.get("weekdayType") || "1";
-        dynamicCurrentObj.type = dynamicCurrentUrl.get("type") || "1";
-        dynamicCurrentObj.content = dynamicCurrentUrl.get("content") || "SiYuan";
+  const dynamicURL = "api/icon/getDynamicIcon?";
+  const dynamicCurrentObj: IObject = {
+    color: "#d23f31",
+    lang: "",
+    date: "",
+    weekdayType: "1",
+    type: "1",
+    content: "SiYuan",
+  };
+  if (
+    dynamicImgElement &&
+    dynamicImgElement.getAttribute("src").startsWith(dynamicURL)
+  ) {
+    const dynamicCurrentUrl = new URLSearchParams(
+      dynamicImgElement.getAttribute("src").replace(dynamicURL, "")
+    );
+    dynamicCurrentObj.color = dynamicCurrentUrl.get("color") || "#d23f31";
+    if (!dynamicCurrentObj.color.startsWith("#")) {
+      dynamicCurrentObj.color = "#" + dynamicCurrentObj.color;
     }
+    dynamicCurrentObj.lang = dynamicCurrentUrl.get("lang") || "";
+    dynamicCurrentObj.date = dynamicCurrentUrl.get("date") || "";
+    dynamicCurrentObj.weekdayType = dynamicCurrentUrl.get("weekdayType") || "1";
+    dynamicCurrentObj.type = dynamicCurrentUrl.get("type") || "1";
+    dynamicCurrentObj.content = dynamicCurrentUrl.get("content") || "SiYuan";
+  }
 
-    const dialog = new Dialog({
-        disableAnimation: true,
-        transparent: true,
-        hideCloseIcon: true,
-        width: isMobile() ? "80vw" : "368px",
-        height: "50vh",
-        content: `<div class="emojis">
+  const initialEmojis = await filterEmoji();
+  const dialog = new Dialog({
+    disableAnimation: true,
+    transparent: true,
+    hideCloseIcon: true,
+    width: isMobile() ? "80vw" : "368px",
+    height: "50vh",
+    content: `<div class="emojis">
     <div class="emojis__tabheader">
-        <div data-type="tab-emoji" class="ariaLabel block__icon block__icon--show" aria-label="${window.siyuan.languages.emoji}"><svg><use xlink:href="#iconEmoji"></use></svg></div>
+        <div data-type="tab-emoji" class="ariaLabel block__icon block__icon--show" aria-label="${
+          window.siyuan.languages.emoji
+        }"><svg><use xlink:href="#iconEmoji"></use></svg></div>
         <div class="fn__space"></div>
-        <div data-type="tab-dynamic" class="ariaLabel block__icon block__icon--show" aria-label="${window.siyuan.languages.dynamicEmoji}"><svg><use xlink:href="#iconCalendar"></use></svg></div>
+        <div data-type="tab-dynamic" class="ariaLabel block__icon block__icon--show" aria-label="${
+          window.siyuan.languages.dynamicEmoji
+        }"><svg><use xlink:href="#iconCalendar"></use></svg></div>
         <div class="fn__flex-1"></div>
-        <span class="block__icon block__icon--show fn__flex-center ariaLabel" data-action="remove" aria-label="${window.siyuan.languages.remove}"><svg><use xlink:href="#iconTrashcan"></use></svg></span>
+        <span class="block__icon block__icon--show fn__flex-center ariaLabel" data-action="remove" aria-label="${
+          window.siyuan.languages.remove
+        }"><svg><use xlink:href="#iconTrashcan"></use></svg></span>
     </div>
     <div class="emojis__tabbody">
         <div class="fn__none" data-type="tab-emoji">
@@ -279,481 +538,1095 @@ export const openEmojiPanel = (id: string, type: "doc" | "notebook" | "av", posi
                 <span class="fn__space"></span>
                 <label class="b3-form__icon fn__flex-1" style="overflow:initial;">
                     <svg class="b3-form__icon-icon"><use xlink:href="#iconSearch"></use></svg>
-                    <input class="b3-form__icon-input b3-text-field fn__block" placeholder="${window.siyuan.languages.search}">
+                    <input class="b3-form__icon-input b3-text-field fn__block" placeholder="${
+                      window.siyuan.languages.search
+                    }">
                 </label>
                 <span class="fn__space"></span>
-                <span class="block__icon block__icon--show fn__flex-center ariaLabel" data-action="random" aria-label="${window.siyuan.languages.random}"><svg><use xlink:href="#iconRefresh"></use></svg></span>
+                <span class="block__icon block__icon--show fn__flex-center ariaLabel" data-action="random" aria-label="${
+                  window.siyuan.languages.random
+                }"><svg><use xlink:href="#iconRefresh"></use></svg></span>
                 <span class="fn__space"></span>
             </div>
-            <div class="emojis__panel">${filterEmoji()}</div>
+            <div class="emojis__panel">${initialEmojis}</div>
             <div class="fn__flex">
                 ${[
-            ["2b50", window.siyuan.languages.recentEmoji],
-            ["1f527", getEmojiTitle(0)],
-            ["1f60d", getEmojiTitle(1)],
-            ["1f433", getEmojiTitle(2)],
-            ["1f96a", getEmojiTitle(3)],
-            ["1f3a8", getEmojiTitle(4)],
-            ["1f3dd-fe0f", getEmojiTitle(5)],
-            ["1f52e", getEmojiTitle(6)],
-            ["267e-fe0f", getEmojiTitle(7)],
-            ["1f6a9", getEmojiTitle(8)],
-        ].map(([unicode, title], index) =>
-            `<div data-type="${index}" class="emojis__type ariaLabel" aria-label="${title}">${unicode2Emoji(unicode)}</div>`
-        ).join("")}
+                  ["2b50", window.siyuan.languages.recentEmoji],
+                  ["1f527", getEmojiTitle(0)],
+                  ["1f60d", getEmojiTitle(1)],
+                  ["1f433", getEmojiTitle(2)],
+                  ["1f96a", getEmojiTitle(3)],
+                  ["1f3a8", getEmojiTitle(4)],
+                  ["1f3dd-fe0f", getEmojiTitle(5)],
+                  ["1f52e", getEmojiTitle(6)],
+                  ["267e-fe0f", getEmojiTitle(7)],
+                  ["1f6a9", getEmojiTitle(8)],
+                ]
+                  .map(
+                    ([unicode, title], index) =>
+                      `<div data-type="${index}" class="emojis__type ariaLabel" aria-label="${title}">${unicode2Emoji(
+                        unicode
+                      )}</div>`
+                  )
+                  .join("")}
             </div>
         </div>
         <div class="fn__none" data-type="tab-dynamic">
             <div class="fn__flex emoji__dynamic-color">
-                <div class="color__square fn__pointer${dynamicCurrentObj.color === "#d23f31" ? " color__square--current" : ""}" style="background-color:#d23f31"></div>
-                <div class="color__square fn__pointer${dynamicCurrentObj.color === "#3575f0" ? " color__square--current" : ""}" style="background-color:#3575f0"></div>
-                <div class="color__square fn__pointer${dynamicCurrentObj.color === "#f3a92f" ? " color__square--current" : ""}" style="background-color:#f3a92f"></div>
-                <div class="color__square fn__pointer${dynamicCurrentObj.color === "#65b84d" ? " color__square--current" : ""}" style="background-color:#65b84d"></div>
-                <div class="color__square fn__pointer${dynamicCurrentObj.color === "#e099ff" ? " color__square--current" : ""}" style="background-color:#e099ff"></div>
-                <div class="color__square fn__pointer${dynamicCurrentObj.color === "#ea5d97" ? " color__square--current" : ""}" style="background-color:#ea5d97"></div>
-                <div class="color__square fn__pointer${dynamicCurrentObj.color === "#93627f" ? " color__square--current" : ""}" style="background-color:#93627f"></div>
-                <div class="color__square fn__pointer${dynamicCurrentObj.color === "#5f6368" ? " color__square--current" : ""}" style="background-color:#5f6368"></div>
+                <div class="color__square fn__pointer${
+                  dynamicCurrentObj.color === "#d23f31"
+                    ? " color__square--current"
+                    : ""
+                }" style="background-color:#d23f31"></div>
+                <div class="color__square fn__pointer${
+                  dynamicCurrentObj.color === "#3575f0"
+                    ? " color__square--current"
+                    : ""
+                }" style="background-color:#3575f0"></div>
+                <div class="color__square fn__pointer${
+                  dynamicCurrentObj.color === "#f3a92f"
+                    ? " color__square--current"
+                    : ""
+                }" style="background-color:#f3a92f"></div>
+                <div class="color__square fn__pointer${
+                  dynamicCurrentObj.color === "#65b84d"
+                    ? " color__square--current"
+                    : ""
+                }" style="background-color:#65b84d"></div>
+                <div class="color__square fn__pointer${
+                  dynamicCurrentObj.color === "#e099ff"
+                    ? " color__square--current"
+                    : ""
+                }" style="background-color:#e099ff"></div>
+                <div class="color__square fn__pointer${
+                  dynamicCurrentObj.color === "#ea5d97"
+                    ? " color__square--current"
+                    : ""
+                }" style="background-color:#ea5d97"></div>
+                <div class="color__square fn__pointer${
+                  dynamicCurrentObj.color === "#93627f"
+                    ? " color__square--current"
+                    : ""
+                }" style="background-color:#93627f"></div>
+                <div class="color__square fn__pointer${
+                  dynamicCurrentObj.color === "#5f6368"
+                    ? " color__square--current"
+                    : ""
+                }" style="background-color:#5f6368"></div>
                 <div class="fn__space--small"></div>
-                <input type="text" class="b3-text-field fn__flex-1 fn__flex-center" value="${dynamicCurrentObj.color}">
+                <input type="text" class="b3-text-field fn__flex-1 fn__flex-center" value="${
+                  dynamicCurrentObj.color
+                }">
             </div>
             <div class="fn__flex">
                 <span class="fn__space"></span>
-                <span class="fn__flex-center ft__on-surface" style="width: 89px">${window.siyuan.languages.language}</span>
+                <span class="fn__flex-center ft__on-surface" style="width: 89px">${
+                  window.siyuan.languages.language
+                }</span>
                 <span class="fn__space--small"></span>
                 <select class="b3-select fn__flex-1">
-                    <option value="" ${dynamicCurrentObj.lang === "" ? " selected" : ""}>${window.siyuan.languages.themeOS}</option>
-                    <option value="en_US" ${dynamicCurrentObj.lang === "en_US" ? " selected" : ""}>English (en_US)</option>
-                    <option value="zh_CHT" ${dynamicCurrentObj.lang === "zh_CHT" ? " selected" : ""}>繁體中文 (zh_CHT)</option>
-                    <option value="zh_CN" ${dynamicCurrentObj.lang === "zh_CN" ? " selected" : ""}>简体中文 (zh_CN)</option>
+                    <option value="" ${
+                      dynamicCurrentObj.lang === "" ? " selected" : ""
+                    }>${window.siyuan.languages.themeOS}</option>
+                    <option value="en_US" ${
+                      dynamicCurrentObj.lang === "en_US" ? " selected" : ""
+                    }>English (en_US)</option>
+                    <option value="zh_CHT" ${
+                      dynamicCurrentObj.lang === "zh_CHT" ? " selected" : ""
+                    }>繁體中文 (zh_CHT)</option>
+                    <option value="zh_CN" ${
+                      dynamicCurrentObj.lang === "zh_CN" ? " selected" : ""
+                    }>简体中文 (zh_CN)</option>
                 </select>
                 <span class="fn__space"></span>
             </div>
             <div class="fn__hr"></div>
             <div class="fn__flex">
                 <span class="fn__space"></span>
-                <span class="fn__flex-center ft__on-surface" style="width: 89px">${window.siyuan.languages.date}</span>
+                <span class="fn__flex-center ft__on-surface" style="width: 89px">${
+                  window.siyuan.languages.date
+                }</span>
                 <span class="fn__space--small"></span>
-                <input type="date" max="9999-12-31" class="b3-text-field fn__flex-1" value="${dynamicCurrentObj.date}"/>
+                <input type="date" max="9999-12-31" class="b3-text-field fn__flex-1" value="${
+                  dynamicCurrentObj.date
+                }"/>
                 <span class="fn__space"></span>
             </div>
             <div class="fn__hr"></div>
             <div class="fn__flex">
                 <span class="fn__space"></span>
-                <span class="fn__flex-center ft__on-surface" style="width: 89px">${window.siyuan.languages.format}</span>
+                <span class="fn__flex-center ft__on-surface" style="width: 89px">${
+                  window.siyuan.languages.format
+                }</span>
                 <span class="fn__space--small"></span>
                 <select class="b3-select fn__flex-1">
-                    ${genWeekdayOptions(dynamicCurrentObj.lang, dynamicCurrentObj.weekdayType)}
+                    ${genWeekdayOptions(
+                      dynamicCurrentObj.lang,
+                      dynamicCurrentObj.weekdayType
+                    )}
                 </select>
                 <span class="fn__space"></span>
             </div>
             <div class="fn__flex fn__flex-wrap">
-                <img class="emoji__dynamic-item${dynamicCurrentObj.type === "1" ? " emoji__dynamic-item--current" : ""}" src="${dynamicURL}type=1&color=${encodeURIComponent(dynamicCurrentObj.color)}&date=${dynamicCurrentObj.date}&weekdayType=${dynamicCurrentObj.weekdayType}&lang=${dynamicCurrentObj.lang}">
-                <img class="emoji__dynamic-item${dynamicCurrentObj.type === "2" ? " emoji__dynamic-item--current" : ""}" src="${dynamicURL}type=2&color=${encodeURIComponent(dynamicCurrentObj.color)}&date=${dynamicCurrentObj.date}&weekdayType=${dynamicCurrentObj.weekdayType}&lang=${dynamicCurrentObj.lang}">
-                <img class="emoji__dynamic-item${dynamicCurrentObj.type === "3" ? " emoji__dynamic-item--current" : ""}" src="${dynamicURL}type=3&color=${encodeURIComponent(dynamicCurrentObj.color)}&date=${dynamicCurrentObj.date}&weekdayType=${dynamicCurrentObj.weekdayType}&lang=${dynamicCurrentObj.lang}">
-                <img class="emoji__dynamic-item${dynamicCurrentObj.type === "4" ? " emoji__dynamic-item--current" : ""}" src="${dynamicURL}type=4&color=${encodeURIComponent(dynamicCurrentObj.color)}&date=${dynamicCurrentObj.date}&weekdayType=${dynamicCurrentObj.weekdayType}&lang=${dynamicCurrentObj.lang}">
-                <img class="emoji__dynamic-item${dynamicCurrentObj.type === "5" ? " emoji__dynamic-item--current" : ""}" src="${dynamicURL}type=5&color=${encodeURIComponent(dynamicCurrentObj.color)}&date=${dynamicCurrentObj.date}&weekdayType=${dynamicCurrentObj.weekdayType}&lang=${dynamicCurrentObj.lang}">
-                <img class="emoji__dynamic-item${dynamicCurrentObj.type === "6" ? " emoji__dynamic-item--current" : ""}" src="${dynamicURL}type=6&color=${encodeURIComponent(dynamicCurrentObj.color)}&date=${dynamicCurrentObj.date}&weekdayType=${dynamicCurrentObj.weekdayType}&lang=${dynamicCurrentObj.lang}">
-                <img class="emoji__dynamic-item${dynamicCurrentObj.type === "7" ? " emoji__dynamic-item--current" : ""}" src="${dynamicURL}type=7&color=${encodeURIComponent(dynamicCurrentObj.color)}&date=${dynamicCurrentObj.date}&weekdayType=${dynamicCurrentObj.weekdayType}&lang=${dynamicCurrentObj.lang}">
+                <img class="emoji__dynamic-item${
+                  dynamicCurrentObj.type === "1"
+                    ? " emoji__dynamic-item--current"
+                    : ""
+                }" src="${dynamicURL}type=1&color=${encodeURIComponent(
+      dynamicCurrentObj.color
+    )}&date=${dynamicCurrentObj.date}&weekdayType=${
+      dynamicCurrentObj.weekdayType
+    }&lang=${dynamicCurrentObj.lang}">
+                <img class="emoji__dynamic-item${
+                  dynamicCurrentObj.type === "2"
+                    ? " emoji__dynamic-item--current"
+                    : ""
+                }" src="${dynamicURL}type=2&color=${encodeURIComponent(
+      dynamicCurrentObj.color
+    )}&date=${dynamicCurrentObj.date}&weekdayType=${
+      dynamicCurrentObj.weekdayType
+    }&lang=${dynamicCurrentObj.lang}">
+                <img class="emoji__dynamic-item${
+                  dynamicCurrentObj.type === "3"
+                    ? " emoji__dynamic-item--current"
+                    : ""
+                }" src="${dynamicURL}type=3&color=${encodeURIComponent(
+      dynamicCurrentObj.color
+    )}&date=${dynamicCurrentObj.date}&weekdayType=${
+      dynamicCurrentObj.weekdayType
+    }&lang=${dynamicCurrentObj.lang}">
+                <img class="emoji__dynamic-item${
+                  dynamicCurrentObj.type === "4"
+                    ? " emoji__dynamic-item--current"
+                    : ""
+                }" src="${dynamicURL}type=4&color=${encodeURIComponent(
+      dynamicCurrentObj.color
+    )}&date=${dynamicCurrentObj.date}&weekdayType=${
+      dynamicCurrentObj.weekdayType
+    }&lang=${dynamicCurrentObj.lang}">
+                <img class="emoji__dynamic-item${
+                  dynamicCurrentObj.type === "5"
+                    ? " emoji__dynamic-item--current"
+                    : ""
+                }" src="${dynamicURL}type=5&color=${encodeURIComponent(
+      dynamicCurrentObj.color
+    )}&date=${dynamicCurrentObj.date}&weekdayType=${
+      dynamicCurrentObj.weekdayType
+    }&lang=${dynamicCurrentObj.lang}">
+                <img class="emoji__dynamic-item${
+                  dynamicCurrentObj.type === "6"
+                    ? " emoji__dynamic-item--current"
+                    : ""
+                }" src="${dynamicURL}type=6&color=${encodeURIComponent(
+      dynamicCurrentObj.color
+    )}&date=${dynamicCurrentObj.date}&weekdayType=${
+      dynamicCurrentObj.weekdayType
+    }&lang=${dynamicCurrentObj.lang}">
+                <img class="emoji__dynamic-item${
+                  dynamicCurrentObj.type === "7"
+                    ? " emoji__dynamic-item--current"
+                    : ""
+                }" src="${dynamicURL}type=7&color=${encodeURIComponent(
+      dynamicCurrentObj.color
+    )}&date=${dynamicCurrentObj.date}&weekdayType=${
+      dynamicCurrentObj.weekdayType
+    }&lang=${dynamicCurrentObj.lang}">
             </div>
             <div class="fn__hr"></div>
             <div class="fn__flex">
                 <span class="fn__space"></span>
-                <span class="fn__flex-center ft__on-surface" style="width: 89px">${window.siyuan.languages.custom}</span>
+                <span class="fn__flex-center ft__on-surface" style="width: 89px">${
+                  window.siyuan.languages.custom
+                }</span>
                 <span class="fn__space--small"></span>
-                <input type="text" class="b3-text-field fn__flex-1" value="${dynamicCurrentObj.content}">
+                <input type="text" class="b3-text-field fn__flex-1" value="${
+                  dynamicCurrentObj.content
+                }">
                 <span class="fn__space"></span>
             </div>
             <div>
-                <img data-type="text" class="emoji__dynamic-item${dynamicCurrentObj.type === "8" ? " emoji__dynamic-item--current" : ""}" src="${dynamicURL}type=8&color=${encodeURIComponent(dynamicCurrentObj.color)}&content=${dynamicCurrentObj.content}&id=${id}">
+                <img data-type="text" class="emoji__dynamic-item${
+                  dynamicCurrentObj.type === "8"
+                    ? " emoji__dynamic-item--current"
+                    : ""
+                }" src="${dynamicURL}type=8&color=${encodeURIComponent(
+      dynamicCurrentObj.color
+    )}&content=${dynamicCurrentObj.content}&id=${id}">
             </div>
         </div>
     </div>
-</div>`
-    });
-    dialog.element.setAttribute("data-key", Constants.DIALOG_EMOJIS);
-    dialog.element.querySelector(".b3-dialog__container").setAttribute("data-menu", "true");
-    const dialogElement = dialog.element.querySelector(".b3-dialog") as HTMLElement;
-    dialogElement.style.justifyContent = "inherit";
-    dialogElement.style.alignItems = "inherit";
-    const currentTab = window.siyuan.storage[Constants.LOCAL_EMOJIS].currentTab;
-    dialog.element.querySelector(`.emojis__tabheader [data-type="tab-${currentTab}"]`).classList.add("block__icon--active");
-    dialog.element.querySelector(`.emojis__tabbody [data-type="tab-${currentTab}"]`).classList.remove("fn__none");
-    setPosition(dialog.element.querySelector(".b3-dialog__container"), position.x, position.y, position.h, position.w);
-    dialog.element.querySelector(".emojis__item").classList.add("emojis__item--current");
-    const emojiSearchInputElement = dialog.element.querySelector('[data-type="tab-emoji"] .b3-text-field') as HTMLInputElement;
-    const emojisContentElement = dialog.element.querySelector(".emojis__panel");
-    emojiSearchInputElement.addEventListener("compositionend", () => {
-        emojisContentElement.innerHTML = filterEmoji(emojiSearchInputElement.value);
-        if (emojiSearchInputElement.value) {
-            emojisContentElement.nextElementSibling.classList.add("fn__none");
-        } else {
-            emojisContentElement.nextElementSibling.classList.remove("fn__none");
+</div>`,
+  });
+  dialog.element.setAttribute("data-key", Constants.DIALOG_EMOJIS);
+  dialog.element
+    .querySelector(".b3-dialog__container")
+    .setAttribute("data-menu", "true");
+  const dialogElement = dialog.element.querySelector(
+    ".b3-dialog"
+  ) as HTMLElement;
+  dialogElement.style.justifyContent = "inherit";
+  dialogElement.style.alignItems = "inherit";
+  const currentTab = window.siyuan.storage[Constants.LOCAL_EMOJIS].currentTab;
+  dialog.element
+    .querySelector(`.emojis__tabheader [data-type="tab-${currentTab}"]`)
+    .classList.add("block__icon--active");
+  dialog.element
+    .querySelector(`.emojis__tabbody [data-type="tab-${currentTab}"]`)
+    .classList.remove("fn__none");
+  setPosition(
+    dialog.element.querySelector(".b3-dialog__container"),
+    position.x,
+    position.y,
+    position.h,
+    position.w
+  );
+  dialog.element
+    .querySelector(".emojis__item")
+    .classList.add("emojis__item--current");
+  const emojiSearchInputElement = dialog.element.querySelector(
+    '[data-type="tab-emoji"] .b3-text-field'
+  ) as HTMLInputElement;
+  const emojisContentElement = dialog.element.querySelector(".emojis__panel");
+
+  // Modify the input event handler in openEmojiPanel to use debounce
+  const handleEmojiSearch = debounce(async (value: string) => {
+    emojisContentElement.innerHTML = await filterEmoji(value);
+    if (value) {
+      emojisContentElement.nextElementSibling.classList.add("fn__none");
+    } else {
+      emojisContentElement.nextElementSibling.classList.remove("fn__none");
+    }
+    emojisContentElement.scrollTop = 0;
+    dialog.element
+      .querySelector(".emojis__item")
+      ?.classList.add("emojis__item--current");
+    if (value === "") {
+      lazyLoadEmoji(dialog.element);
+    }
+    lazyLoadEmojiImg(dialog.element);
+  }, 500); // 500ms debounce delay
+
+  // Update the input event listener
+  emojiSearchInputElement.addEventListener(
+    "input",
+    async (event: InputEvent) => {
+      if (event.isComposing) {
+        return;
+      }
+      handleEmojiSearch(emojiSearchInputElement.value);
+    }
+  );
+
+  emojiSearchInputElement.addEventListener("compositionend", async () => {
+    emojisContentElement.innerHTML = await filterEmoji(
+      emojiSearchInputElement.value
+    );
+    if (emojiSearchInputElement.value) {
+      emojisContentElement.nextElementSibling.classList.add("fn__none");
+    } else {
+      emojisContentElement.nextElementSibling.classList.remove("fn__none");
+    }
+    emojisContentElement.scrollTop = 0;
+    dialog.element
+      .querySelector(".emojis__item")
+      ?.classList.add("emojis__item--current");
+    if (emojiSearchInputElement.value === "") {
+      lazyLoadEmoji(dialog.element);
+    }
+    lazyLoadEmojiImg(dialog.element);
+  });
+  emojiSearchInputElement.addEventListener(
+    "keydown",
+    async (event: KeyboardEvent) => {
+      if (event.isComposing) {
+        return;
+      }
+      if (event.key.indexOf("Arrow") === -1 && event.key !== "Enter") {
+        return;
+      }
+      const currentElement: HTMLElement = dialog.element.querySelector(
+        ".emojis__item--current"
+      );
+      if (!currentElement) {
+        return;
+      }
+      if (event.key === "Enter") {
+        let unicode = currentElement.getAttribute("data-unicode");
+
+        // Handle external/remote icons
+        if (unicode.startsWith("external-")) {
+          const downloadUrl = currentElement.getAttribute("data-download-url");
+          try {
+            const iconId = unicode.replace("external-", "");
+            const assetPath = await downloadAndStoreIcon(downloadUrl, iconId);
+            if (assetPath) {
+              unicode = assetPath.replace("emojis/", "").replace(/^\//, "");
+            }
+            // unicode = assetPath; // emojis/external/external-653276-20250508012313-7g2kc0m.png
+          } catch (error) {
+            console.error("Failed to process external icon:", error);
+          }
         }
-        emojisContentElement.scrollTop = 0;
-        dialog.element.querySelector(".emojis__item")?.classList.add("emojis__item--current");
-        if (emojiSearchInputElement.value === "") {
-            lazyLoadEmoji(dialog.element);
+
+        if (type === "notebook") {
+          fetchPost(
+            "/api/notebook/setNotebookIcon",
+            {
+              notebook: id,
+              icon: unicode,
+            },
+            () => {
+              dialog.destroy();
+              addEmoji(unicode);
+              updateFileTreeEmoji(unicode, id, "iconFilesRoot");
+            }
+          );
+        } else if (type === "doc") {
+          fetchPost(
+            "/api/attr/setBlockAttrs",
+            {
+              id,
+              attrs: { icon: unicode },
+            },
+            () => {
+              dialog.destroy();
+              addEmoji(unicode);
+              updateFileTreeEmoji(unicode, id);
+              updateOutlineEmoji(unicode, id);
+            }
+          );
         }
-        lazyLoadEmojiImg(dialog.element);
-    });
-    emojiSearchInputElement.addEventListener("input", (event: InputEvent) => {
-        if (event.isComposing) {
-            return;
+        if (callback) {
+          callback(unicode);
         }
-        emojisContentElement.innerHTML = filterEmoji(emojiSearchInputElement.value);
-        if (emojiSearchInputElement.value) {
-            emojisContentElement.nextElementSibling.classList.add("fn__none");
-        } else {
-            emojisContentElement.nextElementSibling.classList.remove("fn__none");
+        event.preventDefault();
+        event.stopPropagation();
+        return;
+      }
+      let newCurrentElement: HTMLElement;
+      if (event.key === "ArrowLeft") {
+        if (currentElement.previousElementSibling) {
+          currentElement.classList.remove("emojis__item--current");
+          newCurrentElement =
+            currentElement.previousElementSibling as HTMLElement;
+          event.preventDefault();
+          event.stopPropagation();
+        } else if (
+          currentElement.parentElement.previousElementSibling
+            ?.previousElementSibling
+        ) {
+          currentElement.classList.remove("emojis__item--current");
+          newCurrentElement = currentElement.parentElement
+            .previousElementSibling.previousElementSibling
+            .lastElementChild as HTMLElement;
+          event.preventDefault();
+          event.stopPropagation();
         }
-        emojisContentElement.scrollTop = 0;
-        dialog.element.querySelector(".emojis__item")?.classList.add("emojis__item--current");
-        if (emojiSearchInputElement.value === "") {
-            lazyLoadEmoji(dialog.element);
+      } else if (event.key === "ArrowRight") {
+        if (currentElement.nextElementSibling) {
+          currentElement.classList.remove("emojis__item--current");
+          newCurrentElement = currentElement.nextElementSibling as HTMLElement;
+          event.preventDefault();
+          event.stopPropagation();
+        } else if (
+          currentElement.parentElement.nextElementSibling?.nextElementSibling
+        ) {
+          currentElement.classList.remove("emojis__item--current");
+          newCurrentElement = currentElement.parentElement.nextElementSibling
+            .nextElementSibling.firstElementChild as HTMLElement;
+          event.preventDefault();
+          event.stopPropagation();
         }
-        lazyLoadEmojiImg(dialog.element);
-    });
-    emojiSearchInputElement.addEventListener("keydown", (event: KeyboardEvent) => {
-        if (event.isComposing) {
-            return;
+      } else if (event.key === "ArrowDown") {
+        if (!currentElement.nextElementSibling) {
+          const nextContentElement =
+            currentElement.parentElement.nextElementSibling?.nextElementSibling;
+          if (nextContentElement) {
+            newCurrentElement =
+              nextContentElement.firstElementChild as HTMLElement;
+            currentElement.classList.remove("emojis__item--current");
+          }
+        } else {
+          currentElement.classList.remove("emojis__item--current");
+          let counter = Math.floor(
+            currentElement.parentElement.clientWidth /
+              (currentElement.clientWidth + 2)
+          );
+          newCurrentElement = currentElement;
+          while (newCurrentElement.nextElementSibling && counter > 0) {
+            newCurrentElement =
+              newCurrentElement.nextElementSibling as HTMLElement;
+            counter--;
+          }
         }
-        if (event.key.indexOf("Arrow") === -1 && event.key !== "Enter") {
-            return;
+        event.preventDefault();
+        event.stopPropagation();
+      } else if (event.key === "ArrowUp") {
+        if (!currentElement.previousElementSibling) {
+          const prevContentElement =
+            currentElement.parentElement.previousElementSibling
+              ?.previousElementSibling;
+          if (prevContentElement) {
+            newCurrentElement =
+              prevContentElement.lastElementChild as HTMLElement;
+            currentElement.classList.remove("emojis__item--current");
+          }
+        } else {
+          currentElement.classList.remove("emojis__item--current");
+          let counter = Math.floor(
+            currentElement.parentElement.clientWidth /
+              (currentElement.clientWidth + 2)
+          );
+          newCurrentElement = currentElement;
+          while (newCurrentElement.previousElementSibling && counter > 0) {
+            newCurrentElement =
+              newCurrentElement.previousElementSibling as HTMLElement;
+            counter--;
+          }
         }
-        const currentElement: HTMLElement = dialog.element.querySelector(".emojis__item--current");
-        if (!currentElement) {
-            return;
+        event.preventDefault();
+        event.stopPropagation();
+      }
+      if (newCurrentElement) {
+        newCurrentElement.classList.add("emojis__item--current");
+        const inputHeight = emojiSearchInputElement.clientHeight + 6;
+        if (
+          newCurrentElement.offsetTop - inputHeight <
+          emojisContentElement.scrollTop
+        ) {
+          emojisContentElement.scrollTop =
+            newCurrentElement.offsetTop - inputHeight - 6;
+        } else if (
+          newCurrentElement.offsetTop -
+            inputHeight -
+            emojisContentElement.clientHeight +
+            newCurrentElement.clientHeight >
+          emojisContentElement.scrollTop
+        ) {
+          emojisContentElement.scrollTop =
+            newCurrentElement.offsetTop -
+            inputHeight -
+            emojisContentElement.clientHeight +
+            newCurrentElement.clientHeight;
         }
-        if (event.key === "Enter") {
-            const unicode = currentElement.getAttribute("data-unicode");
-            if (type === "notebook") {
-                fetchPost("/api/notebook/setNotebookIcon", {
-                    notebook: id,
-                    icon: unicode
-                }, () => {
-                    dialog.destroy();
-                    addEmoji(unicode);
-                    updateFileTreeEmoji(unicode, id, "iconFilesRoot");
-                });
-            } else if (type === "doc") {
-                fetchPost("/api/attr/setBlockAttrs", {
-                    id,
-                    attrs: {"icon": unicode}
-                }, () => {
-                    dialog.destroy();
-                    addEmoji(unicode);
-                    updateFileTreeEmoji(unicode, id);
-                    updateOutlineEmoji(unicode, id);
-                });
-            }
-            if (callback) {
-                callback(unicode);
-            }
-            event.preventDefault();
-            event.stopPropagation();
-            return;
+      }
+    }
+  );
+  if (!isMobile() && currentTab === "emoji") {
+    emojiSearchInputElement.focus();
+  }
+  lazyLoadEmoji(dialog.element);
+  lazyLoadEmojiImg(dialog.element);
+  // 不能使用 getEventName 否则 https://github.com/siyuan-note/siyuan/issues/5472
+  dialog.element.addEventListener("click", async (event) => {
+    let target = event.target as HTMLElement;
+    while (target && target !== dialog.element) {
+      if (target.classList.contains("emojis__type")) {
+        const titleElement = emojisContentElement.querySelector(
+          `[data-type="${target.getAttribute("data-type")}"]`
+        ) as HTMLElement;
+        if (titleElement) {
+          const index =
+            titleElement.nextElementSibling.getAttribute("data-index");
+          if (index) {
+            renderEmojiContent(
+              titleElement.previousElementSibling?.getAttribute("data-index"),
+              titleElement.previousElementSibling
+            );
+            renderEmojiContent(index, titleElement.nextElementSibling);
+          }
+          emojisContentElement.scrollTo({
+            top: titleElement.offsetTop - 77,
+            // behavior: "smooth"  不能使用，否则无法定位
+          });
         }
-        let newCurrentElement: HTMLElement;
-        if (event.key === "ArrowLeft") {
-            if (currentElement.previousElementSibling) {
-                currentElement.classList.remove("emojis__item--current");
-                newCurrentElement = currentElement.previousElementSibling as HTMLElement;
-                event.preventDefault();
-                event.stopPropagation();
-            } else if (currentElement.parentElement.previousElementSibling?.previousElementSibling) {
-                currentElement.classList.remove("emojis__item--current");
-                newCurrentElement = currentElement.parentElement.previousElementSibling.previousElementSibling.lastElementChild as HTMLElement;
-                event.preventDefault();
-                event.stopPropagation();
+        break;
+      } else if (target.getAttribute("data-action") === "remove") {
+        if (type === "notebook") {
+          fetchPost(
+            "/api/notebook/setNotebookIcon",
+            {
+              notebook: id,
+              icon: "",
+            },
+            () => {
+              dialog.destroy();
+              updateFileTreeEmoji("", id, "iconFilesRoot");
             }
-        } else if (event.key === "ArrowRight") {
-            if (currentElement.nextElementSibling) {
-                currentElement.classList.remove("emojis__item--current");
-                newCurrentElement = currentElement.nextElementSibling as HTMLElement;
-                event.preventDefault();
-                event.stopPropagation();
-            } else if (currentElement.parentElement.nextElementSibling?.nextElementSibling) {
-                currentElement.classList.remove("emojis__item--current");
-                newCurrentElement = currentElement.parentElement.nextElementSibling.nextElementSibling.firstElementChild as HTMLElement;
-                event.preventDefault();
-                event.stopPropagation();
+          );
+        } else if (type === "doc") {
+          fetchPost(
+            "/api/attr/setBlockAttrs",
+            {
+              id: id,
+              attrs: { icon: "" },
+            },
+            () => {
+              dialog.destroy();
+              updateFileTreeEmoji("", id);
+              updateOutlineEmoji("", id);
             }
-        } else if (event.key === "ArrowDown") {
-            if (!currentElement.nextElementSibling) {
-                const nextContentElement = currentElement.parentElement.nextElementSibling?.nextElementSibling;
-                if (nextContentElement) {
-                    newCurrentElement = nextContentElement.firstElementChild as HTMLElement;
-                    currentElement.classList.remove("emojis__item--current");
-                }
-            } else {
-                currentElement.classList.remove("emojis__item--current");
-                let counter = Math.floor(currentElement.parentElement.clientWidth / (currentElement.clientWidth + 2));
-                newCurrentElement = currentElement;
-                while (newCurrentElement.nextElementSibling && counter > 0) {
-                    newCurrentElement = newCurrentElement.nextElementSibling as HTMLElement;
-                    counter--;
-                }
-            }
-            event.preventDefault();
-            event.stopPropagation();
-        } else if (event.key === "ArrowUp") {
-            if (!currentElement.previousElementSibling) {
-                const prevContentElement = currentElement.parentElement.previousElementSibling?.previousElementSibling;
-                if (prevContentElement) {
-                    newCurrentElement = prevContentElement.lastElementChild as HTMLElement;
-                    currentElement.classList.remove("emojis__item--current");
-                }
-            } else {
-                currentElement.classList.remove("emojis__item--current");
-                let counter = Math.floor(currentElement.parentElement.clientWidth / (currentElement.clientWidth + 2));
-                newCurrentElement = currentElement;
-                while (newCurrentElement.previousElementSibling && counter > 0) {
-                    newCurrentElement = newCurrentElement.previousElementSibling as HTMLElement;
-                    counter--;
-                }
-            }
-            event.preventDefault();
-            event.stopPropagation();
+          );
         }
-        if (newCurrentElement) {
-            newCurrentElement.classList.add("emojis__item--current");
-            const inputHeight = emojiSearchInputElement.clientHeight + 6;
-            if (newCurrentElement.offsetTop - inputHeight < emojisContentElement.scrollTop) {
-                emojisContentElement.scrollTop = newCurrentElement.offsetTop - inputHeight - 6;
-            } else if (newCurrentElement.offsetTop - inputHeight - emojisContentElement.clientHeight + newCurrentElement.clientHeight > emojisContentElement.scrollTop) {
-                emojisContentElement.scrollTop = newCurrentElement.offsetTop - inputHeight - emojisContentElement.clientHeight + newCurrentElement.clientHeight;
+        if (callback) {
+          callback("");
+        }
+        break;
+      } else if (
+        target.classList.contains("emojis__item") ||
+        target.getAttribute("data-action") === "random" ||
+        target.classList.contains("emoji__dynamic-item")
+      ) {
+        let unicode = "";
+        if (target.classList.contains("emojis__item")) {
+          unicode = target.getAttribute("data-unicode");
+          // Handle external/remote icons
+          if (unicode !== null && unicode.startsWith("external-")) {
+            const downloadUrl = target.getAttribute("data-download-url");
+            try {
+              const iconId = unicode.replace("external-", "");
+              const assetPath = await downloadAndStoreIcon(downloadUrl, iconId);
+              if (assetPath) {
+                unicode = assetPath.replace("emojis/", "").replace(/^\//, "");
+              }
+              // unicode = assetPath; // emojis/external/external-653276-20250508012313-7g2kc0m.png
+            } catch (error) {
+              console.error("Failed to process external icon:", error);
+              break;
             }
+          }
+          dialog.destroy();
+        } else if (target.classList.contains("emoji__dynamic-item")) {
+          unicode = target.getAttribute("src");
+          dialog.destroy();
+        } else {
+          // 随机
+          unicode = getRandomEmoji();
         }
-    });
-    if (!isMobile() && currentTab === "emoji") {
-        emojiSearchInputElement.focus();
-    }
-    lazyLoadEmoji(dialog.element);
-    lazyLoadEmojiImg(dialog.element);
-    // 不能使用 getEventName 否则 https://github.com/siyuan-note/siyuan/issues/5472
-    dialog.element.addEventListener("click", (event) => {
-        let target = event.target as HTMLElement;
-        while (target && target !== dialog.element) {
-            if (target.classList.contains("emojis__type")) {
-                const titleElement = emojisContentElement.querySelector(`[data-type="${target.getAttribute("data-type")}"]`) as HTMLElement;
-                if (titleElement) {
-                    const index = titleElement.nextElementSibling.getAttribute("data-index");
-                    if (index) {
-                        renderEmojiContent(titleElement.previousElementSibling?.getAttribute("data-index"), titleElement.previousElementSibling);
-                        renderEmojiContent(index, titleElement.nextElementSibling);
-                    }
-                    emojisContentElement.scrollTo({
-                        top: titleElement.offsetTop - 77,
-                        // behavior: "smooth"  不能使用，否则无法定位
-                    });
-                }
-                break;
-            } else if (target.getAttribute("data-action") === "remove") {
-                if (type === "notebook") {
-                    fetchPost("/api/notebook/setNotebookIcon", {
-                        notebook: id,
-                        icon: ""
-                    }, () => {
-                        dialog.destroy();
-                        updateFileTreeEmoji("", id, "iconFilesRoot");
-                    });
-                } else if (type === "doc") {
-                    fetchPost("/api/attr/setBlockAttrs", {
-                        id: id,
-                        attrs: {"icon": ""}
-                    }, () => {
-                        dialog.destroy();
-                        updateFileTreeEmoji("", id);
-                        updateOutlineEmoji("", id);
-                    });
-                }
-                if (callback) {
-                    callback("");
-                }
-                break;
-            } else if (target.classList.contains("emojis__item") || target.getAttribute("data-action") === "random" || target.classList.contains("emoji__dynamic-item")) {
-                let unicode = "";
-                if (target.classList.contains("emojis__item")) {
-                    unicode = target.getAttribute("data-unicode");
-                    dialog.destroy();
-                } else if (target.classList.contains("emoji__dynamic-item")) {
-                    unicode = target.getAttribute("src");
-                    dialog.destroy();
-                } else {
-                    // 随机
-                    unicode = getRandomEmoji();
-                }
-                if (type === "notebook") {
-                    fetchPost("/api/notebook/setNotebookIcon", {
-                        notebook: id,
-                        icon: unicode
-                    }, () => {
-                        addEmoji(unicode);
-                        updateFileTreeEmoji(unicode, id, "iconFilesRoot");
-                    });
-                } else if (type === "doc") {
-                    fetchPost("/api/attr/setBlockAttrs", {
-                        id,
-                        attrs: {"icon": unicode}
-                    }, () => {
-                        addEmoji(unicode);
-                        updateFileTreeEmoji(unicode, id);
-                        updateOutlineEmoji(unicode, id);
-
-                    });
-                }
-                if (callback) {
-                    callback(unicode);
-                }
-                break;
-            } else if (target.getAttribute("data-type")?.startsWith("tab-")) {
-                dialogElement.querySelectorAll('.emojis__tabheader [data-type|="tab"]').forEach((item: HTMLElement) => {
-                    if (item.dataset.type === target.dataset.type) {
-                        item.classList.add("block__icon--active");
-                    } else {
-                        item.classList.remove("block__icon--active");
-                    }
-                });
-                dialogElement.querySelectorAll(".emojis__tabbody > div").forEach((item: HTMLElement) => {
-                    if (item.dataset.type === target.dataset.type) {
-                        item.classList.remove("fn__none");
-                    } else {
-                        item.classList.add("fn__none");
-                    }
-                });
-                window.siyuan.storage[Constants.LOCAL_EMOJIS].currentTab = target.dataset.type.replace("tab-", "");
-                setStorageVal(Constants.LOCAL_EMOJIS, window.siyuan.storage[Constants.LOCAL_EMOJIS]);
-                break;
-            } else if (target.classList.contains("color__square")) {
-                dynamicTextElements[0].value = target.getAttribute("style").replace("background-color:", "");
-                dynamicTextElements[0].dispatchEvent(new CustomEvent("input"));
-                break;
+        if (type === "notebook") {
+          fetchPost(
+            "/api/notebook/setNotebookIcon",
+            {
+              notebook: id,
+              icon: unicode,
+            },
+            () => {
+              addEmoji(unicode);
+              updateFileTreeEmoji(unicode, id, "iconFilesRoot");
+            }
+          );
+        } else if (type === "doc") {
+          fetchPost(
+            "/api/attr/setBlockAttrs",
+            {
+              id,
+              attrs: { icon: unicode },
+            },
+            () => {
+              addEmoji(unicode);
+              updateFileTreeEmoji(unicode, id);
+              updateOutlineEmoji(unicode, id);
             }
-            target = target.parentElement;
+          );
         }
-    });
-    const dynamicLangElements: NodeListOf<HTMLSelectElement> = dialog.element.querySelectorAll('[data-type="tab-dynamic"] .b3-select');
-    dynamicLangElements[0].addEventListener("change", () => {
-        dialog.element.querySelectorAll(".fn__flex-wrap .emoji__dynamic-item").forEach(item => {
-            const url = new URLSearchParams(item.getAttribute("src").replace(dynamicURL, ""));
-            if (dynamicLangElements[0].value) {
-                url.set("lang", dynamicLangElements[0].value);
+        if (callback) {
+          callback(unicode);
+        }
+        break;
+      } else if (target.getAttribute("data-type")?.startsWith("tab-")) {
+        dialogElement
+          .querySelectorAll('.emojis__tabheader [data-type|="tab"]')
+          .forEach((item: HTMLElement) => {
+            if (item.dataset.type === target.dataset.type) {
+              item.classList.add("block__icon--active");
             } else {
-                url.delete("lang");
+              item.classList.remove("block__icon--active");
             }
-            item.setAttribute("src", dynamicURL + url.toString());
-            dynamicLangElements[1].innerHTML = genWeekdayOptions(dynamicLangElements[0].value, dynamicLangElements[1].value);
-        });
-    });
-    dynamicLangElements[1].addEventListener("change", () => {
-        dialog.element.querySelectorAll(".fn__flex-wrap .emoji__dynamic-item").forEach(item => {
-            const url = new URLSearchParams(item.getAttribute("src").replace(dynamicURL, ""));
-            url.set("weekdayType", dynamicLangElements[1].value);
-            item.setAttribute("src", dynamicURL + url.toString());
-        });
-    });
-    const dynamicDateElement = dialog.element.querySelector('[data-type="tab-dynamic"] [type="date"]') as HTMLInputElement;
-    dynamicDateElement.addEventListener("change", () => {
-        dialog.element.querySelectorAll(".fn__flex-wrap .emoji__dynamic-item").forEach(item => {
-            const url = new URLSearchParams(item.getAttribute("src").replace(dynamicURL, ""));
-            url.set("date", dynamicDateElement.value ? dayjs(dynamicDateElement.value).format("YYYY-MM-DD") : "");
-            item.setAttribute("src", dynamicURL + url.toString());
-        });
-    });
-    const dynamicTextElements: NodeListOf<HTMLInputElement> = dialog.element.querySelectorAll('[data-type="tab-dynamic"] [type="text"]');
-    const dynamicTextImgElement = dialog.element.querySelector('.emoji__dynamic-item[data-type="text"]');
-    dynamicTextElements[0].addEventListener("input", () => {
-        if (!dynamicTextElements[0].value.startsWith("#")) {
-            return;
-        }
-        dialog.element.querySelectorAll(".emoji__dynamic-item").forEach(item => {
-            const url = new URLSearchParams(item.getAttribute("src").replace(dynamicURL, ""));
-            url.set("color", dynamicTextElements[0].value);
-            item.setAttribute("src", dynamicURL + url.toString());
-        });
-        dialog.element.querySelectorAll(".color__square").forEach((item: HTMLElement) => {
-            if (item.style.backgroundColor === dynamicTextElements[0].value) {
-                item.classList.add("color__square--current");
+          });
+        dialogElement
+          .querySelectorAll(".emojis__tabbody > div")
+          .forEach((item: HTMLElement) => {
+            if (item.dataset.type === target.dataset.type) {
+              item.classList.remove("fn__none");
             } else {
-                item.classList.remove("color__square--current");
+              item.classList.add("fn__none");
             }
-        });
-    });
-    dynamicTextElements[1].addEventListener("input", () => {
-        const url = new URLSearchParams(dynamicTextImgElement.getAttribute("src").replace(dynamicURL, ""));
-        url.set("content", dynamicTextElements[1].value);
-        dynamicTextImgElement.setAttribute("src", dynamicURL + url.toString());
+          });
+        window.siyuan.storage[Constants.LOCAL_EMOJIS].currentTab =
+          target.dataset.type.replace("tab-", "");
+        setStorageVal(
+          Constants.LOCAL_EMOJIS,
+          window.siyuan.storage[Constants.LOCAL_EMOJIS]
+        );
+        break;
+      } else if (target.classList.contains("color__square")) {
+        dynamicTextElements[0].value = target
+          .getAttribute("style")
+          .replace("background-color:", "");
+        dynamicTextElements[0].dispatchEvent(new CustomEvent("input"));
+        break;
+      }
+      target = target.parentElement;
+    }
+  });
+  const dynamicLangElements: NodeListOf<HTMLSelectElement> =
+    dialog.element.querySelectorAll('[data-type="tab-dynamic"] .b3-select');
+  dynamicLangElements[0].addEventListener("change", () => {
+    dialog.element
+      .querySelectorAll(".fn__flex-wrap .emoji__dynamic-item")
+      .forEach((item) => {
+        const url = new URLSearchParams(
+          item.getAttribute("src").replace(dynamicURL, "")
+        );
+        if (dynamicLangElements[0].value) {
+          url.set("lang", dynamicLangElements[0].value);
+        } else {
+          url.delete("lang");
+        }
+        item.setAttribute("src", dynamicURL + url.toString());
+        dynamicLangElements[1].innerHTML = genWeekdayOptions(
+          dynamicLangElements[0].value,
+          dynamicLangElements[1].value
+        );
+      });
+  });
+  dynamicLangElements[1].addEventListener("change", () => {
+    dialog.element
+      .querySelectorAll(".fn__flex-wrap .emoji__dynamic-item")
+      .forEach((item) => {
+        const url = new URLSearchParams(
+          item.getAttribute("src").replace(dynamicURL, "")
+        );
+        url.set("weekdayType", dynamicLangElements[1].value);
+        item.setAttribute("src", dynamicURL + url.toString());
+      });
+  });
+  const dynamicDateElement = dialog.element.querySelector(
+    '[data-type="tab-dynamic"] [type="date"]'
+  ) as HTMLInputElement;
+  dynamicDateElement.addEventListener("change", () => {
+    dialog.element
+      .querySelectorAll(".fn__flex-wrap .emoji__dynamic-item")
+      .forEach((item) => {
+        const url = new URLSearchParams(
+          item.getAttribute("src").replace(dynamicURL, "")
+        );
+        url.set(
+          "date",
+          dynamicDateElement.value
+            ? dayjs(dynamicDateElement.value).format("YYYY-MM-DD")
+            : ""
+        );
+        item.setAttribute("src", dynamicURL + url.toString());
+      });
+  });
+  const dynamicTextElements: NodeListOf<HTMLInputElement> =
+    dialog.element.querySelectorAll('[data-type="tab-dynamic"] [type="text"]');
+  const dynamicTextImgElement = dialog.element.querySelector(
+    '.emoji__dynamic-item[data-type="text"]'
+  );
+  dynamicTextElements[0].addEventListener("input", () => {
+    if (!dynamicTextElements[0].value.startsWith("#")) {
+      return;
+    }
+    dialog.element.querySelectorAll(".emoji__dynamic-item").forEach((item) => {
+      const url = new URLSearchParams(
+        item.getAttribute("src").replace(dynamicURL, "")
+      );
+      url.set("color", dynamicTextElements[0].value);
+      item.setAttribute("src", dynamicURL + url.toString());
     });
+    dialog.element
+      .querySelectorAll(".color__square")
+      .forEach((item: HTMLElement) => {
+        if (item.style.backgroundColor === dynamicTextElements[0].value) {
+          item.classList.add("color__square--current");
+        } else {
+          item.classList.remove("color__square--current");
+        }
+      });
+  });
+  dynamicTextElements[1].addEventListener("input", () => {
+    const url = new URLSearchParams(
+      dynamicTextImgElement.getAttribute("src").replace(dynamicURL, "")
+    );
+    url.set("content", dynamicTextElements[1].value);
+    dynamicTextImgElement.setAttribute("src", dynamicURL + url.toString());
+  });
 };
 
 export const updateOutlineEmoji = (unicode: string, id: string) => {
-    /// #if !MOBILE
-    getAllModels().outline.forEach(model => {
-        if (model.blockId === id) {
-            model.headerElement.nextElementSibling.firstElementChild.outerHTML = unicode2Emoji(unicode || window.siyuan.storage[Constants.LOCAL_IMAGES].file, "b3-list-item__graphic", true);
-        }
-    });
-    /// #endif
+  /// #if !MOBILE
+  getAllModels().outline.forEach((model) => {
+    if (model.blockId === id) {
+      model.headerElement.nextElementSibling.firstElementChild.outerHTML =
+        unicode2Emoji(
+          unicode || window.siyuan.storage[Constants.LOCAL_IMAGES].file,
+          "b3-list-item__graphic",
+          true
+        );
+    }
+  });
+  /// #endif
 };
 
-export const updateFileTreeEmoji = (unicode: string, id: string, icon = "iconFile") => {
-    let emojiElement;
-    /// #if MOBILE
-    emojiElement = document.querySelector(`#sidebar [data-type="sidebar-file"] [data-node-id="${id}"] .b3-list-item__icon`);
-    /// #else
-    const dockFile = getDockByType("file");
-    if (dockFile) {
-        const files = dockFile.data.file as Files;
-        if (icon === "iconFile") {
-            emojiElement = files.element.querySelector(`[data-node-id="${id}"] .b3-list-item__icon`);
-        } else {
-            emojiElement = files.element.querySelector(`[data-node-id="${id}"] .b3-list-item__icon`) || files.element.querySelector(`[data-url="${id}"] .b3-list-item__icon`) || files.closeElement.querySelector(`[data-url="${id}"] .b3-list-item__icon`);
-        }
-    }
-    /// #endif
-    if (emojiElement) {
-        emojiElement.innerHTML = unicode2Emoji(unicode || (icon === "iconFile" ? (emojiElement.previousElementSibling.classList.contains("fn__hidden") ? window.siyuan.storage[Constants.LOCAL_IMAGES].file : window.siyuan.storage[Constants.LOCAL_IMAGES].folder) : window.siyuan.storage[Constants.LOCAL_IMAGES].note));
-    }
-    if (icon !== "iconFile") {
-        setNoteBook();
+export const updateFileTreeEmoji = (
+  unicode: string,
+  id: string,
+  icon = "iconFile"
+) => {
+  let emojiElement;
+  /// #if MOBILE
+  emojiElement = document.querySelector(
+    `#sidebar [data-type="sidebar-file"] [data-node-id="${id}"] .b3-list-item__icon`
+  );
+  /// #else
+  const dockFile = getDockByType("file");
+  if (dockFile) {
+    const files = dockFile.data.file as Files;
+    if (icon === "iconFile") {
+      emojiElement = files.element.querySelector(
+        `[data-node-id="${id}"] .b3-list-item__icon`
+      );
+    } else {
+      emojiElement =
+        files.element.querySelector(
+          `[data-node-id="${id}"] .b3-list-item__icon`
+        ) ||
+        files.element.querySelector(`[data-url="${id}"] .b3-list-item__icon`) ||
+        files.closeElement.querySelector(
+          `[data-url="${id}"] .b3-list-item__icon`
+        );
     }
+  }
+  /// #endif
+  if (emojiElement) {
+    emojiElement.innerHTML = unicode2Emoji(
+      unicode ||
+        (icon === "iconFile"
+          ? emojiElement.previousElementSibling.classList.contains("fn__hidden")
+            ? window.siyuan.storage[Constants.LOCAL_IMAGES].file
+            : window.siyuan.storage[Constants.LOCAL_IMAGES].folder
+          : window.siyuan.storage[Constants.LOCAL_IMAGES].note)
+    );
+  }
+  if (icon !== "iconFile") {
+    setNoteBook();
+  }
 };
 
 export const getEmojiDesc = (emoji: IEmojiItem) => {
-    if (window.siyuan.config.lang === "zh_CN") {
-        return emoji.description_zh_cn;
-    }
-    if (window.siyuan.config.lang === "ja_JP") {
-        return emoji.description_ja_jp;
-    }
-    return emoji.description;
+  if (window.siyuan.config.lang === "zh_CN") {
+    return emoji.description_zh_cn;
+  }
+  if (window.siyuan.config.lang === "ja_JP") {
+    return emoji.description_ja_jp;
+  }
+  return emoji.description;
 };
 
 export const getEmojiTitle = (index: number) => {
-    if (window.siyuan.config.lang === "zh_CN") {
-        return window.siyuan.emojis[index].title_zh_cn;
-    }
-    if (window.siyuan.config.lang === "ja_JP") {
-        return window.siyuan.emojis[index].title_ja_jp;
-    }
-    return window.siyuan.emojis[index].title;
+  if (window.siyuan.config.lang === "zh_CN") {
+    return window.siyuan.emojis[index].title_zh_cn;
+  }
+  if (window.siyuan.config.lang === "ja_JP") {
+    return window.siyuan.emojis[index].title_ja_jp;
+  }
+  return window.siyuan.emojis[index].title;
 };
 
 const putEmojis = (protyle: IProtyle) => {
-    if (window.siyuan.emojis[0].items.length > 0) {
-        const emojis: IObject = {};
-        window.siyuan.emojis[0].items.forEach(emojiITem => {
-            emojis[emojiITem.keywords] = protyle.options.hint.emojiPath + "/" + emojiITem.unicode;
-        });
-        protyle.lute.PutEmojis(emojis);
-    }
+  if (window.siyuan.emojis[0].items.length > 0) {
+    const emojis: IObject = {};
+    window.siyuan.emojis[0].items.forEach((emojiITem) => {
+      emojis[emojiITem.keywords] =
+        protyle.options.hint.emojiPath + "/" + emojiITem.unicode;
+    });
+    protyle.lute.PutEmojis(emojis);
+  }
 };
 
 export const reloadEmoji = () => {
-    fetchPost("/api/system/getEmojiConf", {}, response => {
-        window.siyuan.emojis = response.data as IEmoji[];
-        getAllEditor().forEach(item => {
-            putEmojis(item.protyle);
-        });
+  fetchPost("/api/system/getEmojiConf", {}, (response) => {
+    window.siyuan.emojis = response.data as IEmoji[];
+    getAllEditor().forEach((item) => {
+      putEmojis(item.protyle);
+    });
+  });
+};
+
+function getIconUrls(
+  icon: IIconFinderResponseIcon | IIcon8ResponseIcon | IFlatIconDataItem,
+  targetSize: number = 256
+): { downloadUrl: string; previewUrl: string } {
+  if ("download_url" in icon) {
+    const finderIcon = icon as IIconFinderResponseIcon;
+    // Sort raster_sizes by size, closest to target first
+    const sizes = finderIcon.raster_sizes.sort((a, b) => {
+      const aDiff = Math.abs(a.size - targetSize);
+      const bDiff = Math.abs(b.size - targetSize);
+      return aDiff - bDiff;
+    });
+
+    // Find first size that has PNG format
+    for (const size of sizes) {
+      const pngFormat = size.formats.find((f) => f.format === "png");
+      if (pngFormat) {
+        return {
+          downloadUrl: pngFormat.download_url,
+          previewUrl: pngFormat.preview_url,
+        };
+      }
+    }
+
+    // Fallback to first available format if no PNG found
+    const firstSize = sizes[0];
+    return {
+      downloadUrl: firstSize.formats[0].download_url,
+      previewUrl: firstSize.formats[0].preview_url,
+    };
+  } else if ("free_svg" in icon) {
+    const flatIcon = icon as IFlatIconDataItem;
+    // Extract thumbnail URL closest to target size
+    const thumbnails = flatIcon.thumbnails.sort((a, b) => {
+      const aDiff = Math.abs(a.width - targetSize);
+      const bDiff = Math.abs(b.width - targetSize);
+      return aDiff - bDiff;
+    });
+
+    const thumbnailUrl = thumbnails[0]?.url;
+
+    return {
+      downloadUrl: `https://api.freepik.com/v1/icons/${flatIcon.id}/download`,
+      previewUrl: thumbnailUrl,
+    };
+  } else {
+    const icon8Icon = icon as IIcon8ResponseIcon;
+
+    return {
+      downloadUrl: `https://img.icons8.com/?id=${
+        icon8Icon.id
+      }&format=png&size=${targetSize}&name=icons8-${icon8Icon.name.toLowerCase()}-${targetSize}.png&fromSite=true`,
+      previewUrl: `https://img.icons8.com/?id=${
+        icon8Icon.id
+      }&format=png&size=${targetSize}&name=icons8-${icon8Icon.name.toLowerCase()}-${targetSize}.png&fromSite=true`,
+    };
+  }
+}
+
+export const searchIconFinder = async (
+  query: string,
+  maxResults: number = 20
+): Promise<IEmojiItem[]> => {
+  try {
+    const ICONFINDER_API_KEY = window.siyuan.config.appearance.iconFinderAPIKey;
+    const response = await fetch(
+      `https://api.iconfinder.com/v4/icons/search?query=${encodeURIComponent(
+        query
+      )}&count=${maxResults}&premium=0`,
+      {
+        headers: {
+          Authorization: `Bearer ${ICONFINDER_API_KEY}`,
+        },
+      }
+    );
+
+    if (!response.ok) {
+      throw new Error(`IconFinder API error: ${response.statusText}`);
+    }
+
+    const data: IIconFinderResponse = await response.json();
+
+    // Filter non-premium icons
+    const nonPremiumIcons = data.icons.filter((icon) => !icon.is_premium);
+
+    // Convert to IEmojiItem format
+    return nonPremiumIcons.map((icon): IEmojiItem => {
+      const urls = getIconUrls(icon);
+      const urlData = `${urls.downloadUrl}|${urls.previewUrl}`;
+
+      return {
+        unicode: `external-${icon.icon_id}`,
+        description: icon.tags.join(", "),
+        description_zh_cn: icon.tags.join(", "),
+        description_ja_jp: icon.tags.join(", "),
+        keywords: `${icon.tags.join(" ")} __url__${urlData}`,
+      };
+    });
+  } catch (error) {
+    console.error("IconFinder search failed:", error);
+    return [];
+  }
+};
+
+export const searchIcon8 = async (
+  query: string,
+  maxResults: number = 20
+): Promise<IEmojiItem[]> => {
+  try {
+    const response = await fetch(
+      `https://search-app.icons8.com/api/iconsets/v7/search?amount=${maxResults}&offset=0&language=en&saveAnalytics=false&isOuch=true&replaceNameWithSynonyms=true&term=${encodeURIComponent(
+        query
+      )}`
+    );
+
+    if (!response.ok) {
+      throw new Error(`Icon8 API error: ${response.statusText}`);
+    }
+
+    const data: IIcon8Response = await response.json();
+
+    // Filter non-premium icons
+    const nonPremiumIcons = data.icons.filter((icon) => {
+      if ("free" in icon && icon.free !== null) {
+        return icon.free === true;
+      } else {
+        return true;
+      }
+    });
+
+    const icons = nonPremiumIcons.map((icon): IEmojiItem => {
+      const urls = getIconUrls(icon);
+      const urlData = `${urls.downloadUrl}|${urls.previewUrl}`;
+      return {
+        unicode: `external-${icon.id}`,
+        description: icon.name,
+        description_zh_cn: icon.name,
+        description_ja_jp: icon.name,
+        keywords: `${icon.name} __url__${urlData}`,
+      };
     });
+    return icons;
+  } catch (error) {
+    console.error("Icon8 search failed:", error);
+    return [];
+  }
+};
+
+const searchFlatIcon = async (
+  query: string,
+  maxResults: number = 20
+): Promise<IEmojiItem[]> => {
+  try {
+    // thumbnail_size
+    const response = await fetch(
+      `https://api.flaticon.com/v1/icons?query=${encodeURIComponent(query)}`,
+      {
+        headers: {
+          "x-freepik-api-key": `Bearer ${window.siyuan.config.appearance.flatIconAPIKey}`,
+        },
+      }
+    );
+
+    if (!response.ok) {
+      throw new Error(`FlatIcon API error: ${response.statusText}`);
+    }
+
+    const data: IFlatIconResponse = await response.json();
+
+    return data.data
+      .map((icon): IEmojiItem => {
+        const urls = getIconUrls(icon);
+        const urlData = `${urls.downloadUrl}|${urls.previewUrl}`;
+        return {
+          unicode: `external-${icon.id}`,
+          description: icon.name,
+          description_zh_cn: icon.name,
+          description_ja_jp: icon.name,
+          keywords: `${icon.name} __url__${urlData}`,
+        };
+      })
+      .slice(0, maxResults);
+  } catch (error) {
+    console.error("FlatIcon search failed:", error);
+    return [];
+  }
+};
+
+function extractUrlsFromKeywords(
+  keywords: string
+): { downloadUrl: string; previewUrl: string } | null {
+  const urlMatch = keywords.match(/__url__(.*?)\|(.*?)(?:\s|$)/);
+  if (urlMatch) {
+    return {
+      downloadUrl: urlMatch[1],
+      previewUrl: urlMatch[2],
+    };
+  }
+  return null;
+}
+
+export const downloadAndStoreIcon = async (
+  iconUrl: string,
+  iconId: string
+): Promise<string> | null => {
+  try {
+    const assetPath = `/data/emojis/external/external-${iconId}.png`;
+
+    // Check if already exists first
+    try {
+      const getFileResponse = await fetchSyncPost("/api/file/getFile", {
+        path: assetPath,
+      });
+      if (getFileResponse.code === 200) {
+        return getFileResponse.data.path;
+      }
+    } catch {
+      // File doesn't exist, continue with download
+    }
+
+    // Download the icon
+    let response: Response | null;
+    if (window.siyuan.config.appearance.remoteIconProvider === "iconFinder") {
+      response = await fetch(iconUrl, {
+        headers: {
+          Authorization: `Bearer ${window.siyuan.config.appearance.iconFinderAPIKey}`,
+        },
+      });
+    } else if (window.siyuan.config.appearance.remoteIconProvider === "icon8") {
+      response = await fetch(iconUrl);
+    } else if (
+      window.siyuan.config.appearance.remoteIconProvider === "flatIcon"
+    ) {
+      response = await fetch(iconUrl, {
+        headers: {
+          "x-freepik-api-key": `Bearer ${window.siyuan.config.appearance.flatIconAPIKey}`,
+        },
+      });
+    }
+
+    if (response === null) {
+      throw new Error("Failed to fetch icon URL");
+    }
+    if (!response.ok) {
+      throw new Error("Failed to download icon");
+    }
+
+    const blob = await response.blob();
+    const formData = new FormData();
+
+    // Set up form data for upload
+    formData.append(
+      "file[]",
+      new File([blob], `external-${iconId}.png`, { type: "image/png" })
+    );
+    formData.append("assetsDirPath", "/emojis/external/");
+
+    const uploadAssetResponse = await fetchSyncPost(
+      "/api/asset/upload",
+      formData
+    );
+    if (uploadAssetResponse.code === 0) {
+      const succMap = uploadAssetResponse.data.succMap;
+      const paths = Object.values(succMap);
+      if (paths && paths.length > 0) {
+        return paths[0];
+      } else {
+        return null;
+      }
+    }
+  } catch (error) {
+    console.error("Failed to download and store icon:", error);
+    throw error;
+  }
 };
diff --git a/app/src/layout/dock/Files.ts b/app/src/layout/dock/Files.ts
index 07f8c48e8..0f51f2209 100644
--- a/app/src/layout/dock/Files.ts
+++ b/app/src/layout/dock/Files.ts
@@ -122,6 +122,8 @@ export class Files extends Model {
         <svg><use xlink:href="#iconContract"></use></svg>
     </span>
     <div class="fn__space${window.siyuan.config.readonly ? " fn__none" : ""}"></div>
+    <span data-type="newNoteBook" class="block__icon b3-tooltips b3-tooltips__sw" aria-label="New NoteBook"><svg><use xlink:href='#iconFilesRoot'></use></svg></span>
+    <span class="fn__space"></span>
     <div data-type="more" class="b3-tooltips b3-tooltips__sw block__icon${window.siyuan.config.readonly ? " fn__none" : ""}" aria-label="${window.siyuan.languages.more}">
         <svg><use xlink:href="#iconMore"></use></svg>
     </div> 
@@ -198,6 +200,11 @@ export class Files extends Model {
             }
         });
         // 为了快捷键的 dispatch
+        this.actionsElement.querySelector('[data-type="newNoteBook"]').addEventListener("click", () => {
+            if (!window.siyuan.config.readonly) {
+                newNotebook();
+            }
+        });
         this.actionsElement.querySelector('[data-type="collapse"]').addEventListener("click", () => {
             Array.from(this.element.children).forEach(item => {
                 const liElement = item.firstElementChild;
@@ -1263,15 +1270,15 @@ aria-label="${ariaLabel}">${getDisplayName(item.name, true, true)}</span>
 
     private initMoreMenu() {
         window.siyuan.menus.menu.remove();
-        if (!window.siyuan.config.readonly) {
-            window.siyuan.menus.menu.append(new MenuItem({
-                icon: "iconFilesRoot",
-                label: window.siyuan.languages.newNotebook,
-                click: () => {
-                    newNotebook();
-                }
-            }).element);
-        }
+        // if (!window.siyuan.config.readonly) {
+        //     window.siyuan.menus.menu.append(new MenuItem({
+        //         icon: "iconFilesRoot",
+        //         label: window.siyuan.languages.newNotebook,
+        //         click: () => {
+        //             newNotebook();
+        //         }
+        //     }).element);
+        // }
         window.siyuan.menus.menu.append(new MenuItem({
             icon: "iconRefresh",
             label: window.siyuan.languages.rebuildIndex,
diff --git a/app/src/protyle/hint/index.ts b/app/src/protyle/hint/index.ts
index 72adbf4cf..5c2617036 100644
--- a/app/src/protyle/hint/index.ts
+++ b/app/src/protyle/hint/index.ts
@@ -364,48 +364,55 @@ ${genHintItemHTML(item)}
             return;
         }
 
-        const panelElement = this.element.querySelector(".emojis__panel");
-        if (panelElement) {
-            panelElement.innerHTML = filterEmoji(value, 256);
-            if (value) {
-                panelElement.nextElementSibling.classList.add("fn__none");
+        const afterEmojiPanelInit = () => {
+            const firstEmojiElement = this.element.querySelector(".emojis__item");
+            if (firstEmojiElement) {
+                firstEmojiElement.classList.add("emojis__item--current");
+                this.element.classList.remove("fn__none");
+                const textareaPosition = getSelectionPosition(protyle.wysiwyg.element);
+                setPosition(this.element, textareaPosition.left, textareaPosition.top + 26, 30);
+                this.element.querySelector(".emojis__panel").scrollTop = 0;
             } else {
-                panelElement.nextElementSibling.classList.remove("fn__none");
+                this.element.classList.add("fn__none");
             }
-            lazyLoadEmojiImg(panelElement);
+        }
+
+        const panelElement = this.element.querySelector(".emojis__panel");
+        if (panelElement) {
+            filterEmoji(value, 256, "slash_hint").then(emojiHTML => {
+                panelElement.innerHTML = emojiHTML;
+                if (value) {
+                    panelElement.nextElementSibling.classList.add("fn__none");
+                } else {
+                    panelElement.nextElementSibling.classList.remove("fn__none");
+                }
+                lazyLoadEmojiImg(panelElement);
+            }).then(afterEmojiPanelInit);
         } else {
-            // max-height：min(402px,40vh) 和 .protyle-hint 保持一致，否则 emoji 不显示底部导航
-            this.element.innerHTML = `<div style="padding:0;max-height:min(402px,40vh);width:366px" class="emojis">
-<div class="emojis__panel">${filterEmoji(value, 256)}</div>
+            filterEmoji(value, 256, "slash_hint").then(emojiHTML => {
+                // max-height：min(402px,40vh) 和 .protyle-hint 保持一致，否则 emoji 不显示底部导航
+                this.element.innerHTML = `<div style="padding:0;max-height:min(402px,40vh);width:366px" class="emojis">
+<div class="emojis__panel">${emojiHTML}</div>
 <div class="fn__flex${value ? " fn__none" : ""}">
-    ${[
-                ["2b50", window.siyuan.languages.recentEmoji],
-                ["1f527", getEmojiTitle(0)],
-                ["1f60d", getEmojiTitle(1)],
-                ["1f433", getEmojiTitle(2)],
-                ["1f96a", getEmojiTitle(3)],
-                ["1f3a8", getEmojiTitle(4)],
-                ["1f3dd-fe0f", getEmojiTitle(5)],
-                ["1f52e", getEmojiTitle(6)],
-                ["267e-fe0f", getEmojiTitle(7)],
-                ["1f6a9", getEmojiTitle(8)],
-            ].map(([unicode, title], index) =>
-                `<button data-type="${index}" class="emojis__type ariaLabel" aria-label="${title}">${unicode2Emoji(unicode)}</button>`
-            ).join("")}
+        ${[
+                    ["2b50", window.siyuan.languages.recentEmoji],
+                    ["1f527", getEmojiTitle(0)],
+                    ["1f60d", getEmojiTitle(1)],
+                    ["1f433", getEmojiTitle(2)],
+                    ["1f96a", getEmojiTitle(3)],
+                    ["1f3a8", getEmojiTitle(4)],
+                    ["1f3dd-fe0f", getEmojiTitle(5)],
+                    ["1f52e", getEmojiTitle(6)],
+                    ["267e-fe0f", getEmojiTitle(7)],
+                    ["1f6a9", getEmojiTitle(8)],
+                ].map(([unicode, title], index) =>
+                    `<button data-type="${index}" class="emojis__type ariaLabel" aria-label="${title}">${unicode2Emoji(unicode)}</button>`
+                ).join("")}
 </div>
 </div>`;
-            lazyLoadEmoji(this.element);
-            lazyLoadEmojiImg(this.element);
-        }
-        const firstEmojiElement = this.element.querySelector(".emojis__item");
-        if (firstEmojiElement) {
-            firstEmojiElement.classList.add("emojis__item--current");
-            this.element.classList.remove("fn__none");
-            const textareaPosition = getSelectionPosition(protyle.wysiwyg.element);
-            setPosition(this.element, textareaPosition.left, textareaPosition.top + 26, 30);
-            this.element.querySelector(".emojis__panel").scrollTop = 0;
-        } else {
-            this.element.classList.add("fn__none");
+                lazyLoadEmoji(this.element);
+                lazyLoadEmojiImg(this.element);
+            }).then(afterEmojiPanelInit)
         }
     }
 
diff --git a/app/src/types/config.d.ts b/app/src/types/config.d.ts
index be656bd5a..162a3b8c0 100644
--- a/app/src/types/config.d.ts
+++ b/app/src/types/config.d.ts
@@ -230,6 +230,18 @@ declare namespace Config {
          * The language used by the current user
          */
         lang: TLang;
+        /**
+         * The remote icon provider
+         */
+        remoteIconProvider: string;
+        /**
+         * The api key for iconfinder.com
+         */
+        iconFinderAPIKey: string;
+        /**
+         * The api key for flaticon.com
+         */
+        flatIconAPIKey: string;
         /**
          * List of installed light themes
          */
diff --git a/app/src/types/index.d.ts b/app/src/types/index.d.ts
index 146039d74..8c4792898 100644
--- a/app/src/types/index.d.ts
+++ b/app/src/types/index.d.ts
@@ -974,3 +974,115 @@ interface IAVCalc {
     operator?: string,
     result?: IAVCellValue
 }
+
+interface IIconFinderResponseIcon {
+  icon_id: number;
+  tags: string[];
+  published_at: string;
+  is_premium: boolean;
+  type: string;
+  containers: any[];
+  raster_sizes: Array<{
+    formats: Array<{
+      format: string;
+      preview_url: string;
+      download_url: string;
+    }>;
+    size: number;
+    size_width: number;
+    size_height: number;
+  }>;
+  vector_sizes: Array<{
+    formats: Array<{
+      format: string;
+      download_url: string;
+    }>;
+    target_sizes: number[][];
+    size: number;
+    size_width: number;
+    size_height: number;
+  }>;
+  styles: any[];
+  categories: any[];
+  is_icon_glyph: boolean;
+}
+
+interface IIconFinderResponse {
+  total_count: number;
+  icons: Array<IIconFinderResponseIcon>;
+}
+
+interface IIcon8ResponseIcon {
+  id: string;
+  name: string;
+  commonName: string;
+  category: string;
+  subcategory?: string;
+  platform: string;
+  free?: boolean;
+  isColor: boolean;
+  isExplicit: boolean;
+  authorApiCode: string;
+  sourceFormat: string;
+}
+
+interface IIcon8Response {
+  success: boolean;
+  parameters: {
+    amount: number;
+    countAll: number;
+    language: string;
+    foundLanguage: string;
+    offset: number;
+    term: string;
+    searchTranslations: {
+      [key: string]: string;
+    };
+  };
+  icons: Array<IIcon8ResponseIcon>;
+}
+
+interface IFlatIconDataItem {
+  id: number;
+  name: string;
+  created: string;
+  slug: string;
+  style: {
+    id: number;
+    name: string;
+  };
+  family: {
+    id: number;
+    name: string;
+    total: number;
+  };
+  free_svg: boolean;
+  author: {
+    id: number;
+    name: string;
+    slug: string;
+    avatar: string;
+    assets: number;
+  };
+  thumbnails: Array<{
+    width: number;
+    height: number;
+    url: string;
+  }>;
+  tags: Array<{
+    slug: string;
+    name: string;
+  }>;
+}
+
+interface IFlatIconResponse {
+  data: IFlatIconDataItem[];
+  meta: {
+    pagination: {
+      total: number;
+      last_page: number;
+      per_page: number;
+      current_page: number;
+    };
+  };
+}
\ No newline at end of file
diff --git a/kernel/conf/appearance.go b/kernel/conf/appearance.go
index ebd1002ac..c726c1f1e 100644
--- a/kernel/conf/appearance.go
+++ b/kernel/conf/appearance.go
@@ -33,6 +33,9 @@ type Appearance struct {
 	ThemeJS             bool               `json:"themeJS"`             // 是否启用了主题 JavaScript
 	CloseButtonBehavior int                `json:"closeButtonBehavior"` // 关闭按钮行为，0：退出，1：最小化到托盘
 	HideStatusBar       bool               `json:"hideStatusBar"`       // 是否隐藏底部状态栏
+	RemoteIconProvider       string               `json:"remoteIconProvider"`       // remote icon provider, e.g. icon8
+	IconFinderAPIKey       string               `json:"iconFinderAPIKey"`       // api key for iconfinder.com
+	FlatIconAPIKey       string               `json:"flatIconAPIKey"`       // api key for flaticon.com
 }
 
 func NewAppearance() *Appearance {
@@ -45,6 +48,9 @@ func NewAppearance() *Appearance {
 		CodeBlockThemeLight: "github",
 		CodeBlockThemeDark:  "base16/dracula",
 		Lang:                "en_US",
+		RemoteIconProvider:	 "",
+		IconFinderAPIKey:	 "",
+		FlatIconAPIKey:	 	 "",
 		CloseButtonBehavior: 0,
 		HideStatusBar:       false,
 	}
